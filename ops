{"version":1,"ops":[{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1662296779,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjNiecE"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"# Context\nThe initial idea for the optimization framework was,\nto create a modeler for complex optimization systems.\nThereby, as system was planned to be executable given a set of events.\nIt should be analyzable in order to extract knowledge for a given optimization system.\nAlso, the optimization of such a system would have a vast variarity of applications.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames with multiple actors are extraordinarily different to other optimization problems\nand would provide a great challenge for this project.\nIt may also be a way to attract the public to this project.\n\nInitially, the implementation of chess was planned,\nbut was later rejected,\nbecause it is not that interesting and has limited use.\nA building and war game on the other hand,\nis easy to extend or to adapt.\n# Goals\n* [ ] Document goal of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counter part to test recursion.\n* [ ] Do not work too much on it, as long as #8 and #9 are not implemented yet.\n* [x] Create a very simple renderer for it.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Create building and war game based on X players.\n   * [ ] Implement game of life with 2 players.\n   * [ ] Implement game of life with 2 players, where the players can attack each other.\n    * [ ] Implement game of life with 2 players, where the players can make a decision.\n* [x] Find a name: crisis network = cin\n# Ideas for Advanced versions\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1663360766,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjQOWTI"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"# Context\nThe initial idea for the optimization framework was,\nto create a modeler for complex optimization systems.\nThereby, as system was planned to be executable given a set of events.\nIt should be analyzable in order to extract knowledge for a given optimization system.\nAlso, the optimization of such a system would have a vast variarity of applications.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames with multiple actors are extraordinarily different to other optimization problems\nand would provide a great challenge for this project.\nIt may also be a way to attract the public to this project.\n\nInitially, the implementation of chess was planned,\nbut was later rejected,\nbecause it is not that interesting and has limited use.\nA building and war game on the other hand,\nis easy to extend or to adapt.\n# Goals\n* [ ] Document goal of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counter part to test recursion.\n* [ ] Do not work too much on it, as long as #8 and #9 are not implemented yet.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables and constraints.\n   * [ ] Create page per table, allocations or constraint.\n   * [ ] Create table, allocations and constraints renderer.\n   * [ ] Register renderer to all table, allocations and constraints via Dem aspects and object paths.\n   * [ ] Make it easy to activate this aspect via Dem config.\n   * [ ] Provide config for the web server project, where every feature is enabled. This would be good in the feature for all projects.\nThis could be done via workflow or app classes like the class Dem.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Create building and war game based on X players.\n   * [ ] Implement game of life with 2 players.\n   * [ ] Implement game of life with 2 players, where the players can attack each other.\n    * [ ] Implement game of life with 2 players, where the players can make a decision.\n* [x] Find a name: crisis network = cin\n# Ideas for Advanced versions\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1663360802,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjQOWzg"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"# Context\nThe initial idea for the optimization framework was,\nto create a modeler for complex optimization systems.\nThereby, as system was planned to be executable given a set of events.\nIt should be analyzable in order to extract knowledge for a given optimization system.\nAlso, the optimization of such a system would have a vast variarity of applications.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames with multiple actors are extraordinarily different to other optimization problems\nand would provide a great challenge for this project.\nIt may also be a way to attract the public to this project.\n\nInitially, the implementation of chess was planned,\nbut was later rejected,\nbecause it is not that interesting and has limited use.\nA building and war game on the other hand,\nis easy to extend or to adapt.\n# Goals\n* [ ] Document goal of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counter part to test recursion.\n* [ ] Do not work too much on it, as long as #8 and #9 are not implemented yet.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables and constraints.\n   * [ ] Create page per table, allocations or constraint.\n   * [ ] Create table, allocations and constraints renderer.\n   * [ ] Register renderer to all table, allocations and constraints via Dem aspects and object paths.\n   * [ ] Make it easy to activate this aspect via Dem config.\n   * [ ] Provide config for the web server project, where every feature is enabled. This would be good in the feature for all projects. This could be done via workflow or app classes like the class Dem.\n      * [ ] Document this in general Java project guidelines.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Create building and war game based on X players.\n   * [ ] Implement game of life with 2 players.\n   * [ ] Implement game of life with 2 players, where the players can attack each other.\n    * [ ] Implement game of life with 2 players, where the players can make a decision.\n* [x] Find a name: crisis network = cin\n# Ideas for Advanced versions\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1663360997,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjQOYvI"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"# Context\nThe initial idea for the optimization framework was,\nto create a modeler for complex optimization systems.\nThereby, as system was planned to be executable given a set of events.\nIt should be analyzable in order to extract knowledge for a given optimization system.\nAlso, the optimization of such a system would have a vast variarity of applications.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames with multiple actors are extraordinarily different to other optimization problems\nand would provide a great challenge for this project.\nIt may also be a way to attract the public to this project.\n\nInitially, the implementation of chess was planned,\nbut was later rejected,\nbecause it is not that interesting and has limited use.\nA building and war game on the other hand,\nis easy to extend or to adapt.\n# Goals\n* [ ] Document goal of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counter part to test recursion.\n* [ ] Do not work too much on it, as long as #8 and #9 are not implemented yet.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [ ] Create table renderer.\n   * [ ] Create page per table.\n   * [ ] Register renderer to all tables via Dem aspects and object paths.\n   * [ ] Make it easy to activate this aspect via Dem config.\n   * [ ] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.\n      * [ ] Document this in general Java project guidelines.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Create building and war game based on X players.\n   * [ ] Implement game of life with 2 players.\n   * [ ] Implement game of life with 2 players, where the players can attack each other.\n    * [ ] Implement game of life with 2 players, where the players can make a decision.\n* [x] Find a name: crisis network = cin\n# Ideas for Advanced versions\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1663361035,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjQOZHs"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"# Context\nThe initial idea for the optimization framework was,\nto create a modeler for complex optimization systems.\nThereby, as system was planned to be executable given a set of events.\nIt should be analyzable in order to extract knowledge for a given optimization system.\nAlso, the optimization of such a system would have a vast variarity of applications.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames with multiple actors are extraordinarily different to other optimization problems\nand would provide a great challenge for this project.\nIt may also be a way to attract the public to this project.\n\nInitially, the implementation of chess was planned,\nbut was later rejected,\nbecause it is not that interesting and has limited use.\nA building and war game on the other hand,\nis easy to extend or to adapt.\n# Goals\n* [ ] Document goal of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counter part to test recursion.\n* [ ] Do not work too much on it, as long as #8 and #9 are not implemented yet.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [ ] Create table HTML renderer.\n   * [ ] Create complete page renderer for table.\n   * [ ] Register renderer to all tables via Dem aspects and object paths.\n   * [ ] Make it easy to activate this aspect via Dem config.\n   * [ ] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.\n      * [ ] Document this in general Java project guidelines.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Create building and war game based on X players.\n   * [ ] Implement game of life with 2 players.\n   * [ ] Implement game of life with 2 players, where the players can attack each other.\n    * [ ] Implement game of life with 2 players, where the players can make a decision.\n* [x] Find a name: crisis network = cin\n# Ideas for Advanced versions\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1663361052,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjQOZRI"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"# Context\nThe initial idea for the optimization framework was,\nto create a modeler for complex optimization systems.\nThereby, as system was planned to be executable given a set of events.\nIt should be analyzable in order to extract knowledge for a given optimization system.\nAlso, the optimization of such a system would have a vast variarity of applications.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames with multiple actors are extraordinarily different to other optimization problems\nand would provide a great challenge for this project.\nIt may also be a way to attract the public to this project.\n\nInitially, the implementation of chess was planned,\nbut was later rejected,\nbecause it is not that interesting and has limited use.\nA building and war game on the other hand,\nis easy to extend or to adapt.\n# Goals\n* [ ] Document goal of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counter part to test recursion.\n* [ ] Do not work too much on it, as long as #8 and #9 are not implemented yet.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [ ] Create HTML renderer for table.\n   * [ ] Create complete page renderer for table.\n   * [ ] Register renderer to all tables via Dem aspects and object paths.\n   * [ ] Make it easy to activate this aspect via Dem config.\n   * [ ] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.\n      * [ ] Document this in general Java project guidelines.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Create building and war game based on X players.\n   * [ ] Implement game of life with 2 players.\n   * [ ] Implement game of life with 2 players, where the players can attack each other.\n    * [ ] Implement game of life with 2 players, where the players can make a decision.\n* [x] Find a name: crisis network = cin\n# Ideas for Advanced versions\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1663361089,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjQOZmc"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"# Context\nThe initial idea for the optimization framework was,\nto create a modeler for complex optimization systems.\nThereby, as system was planned to be executable given a set of events.\nIt should be analyzable in order to extract knowledge for a given optimization system.\nAlso, the optimization of such a system would have a vast variarity of applications.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames with multiple actors are extraordinarily different to other optimization problems\nand would provide a great challenge for this project.\nIt may also be a way to attract the public to this project.\n\nInitially, the implementation of chess was planned,\nbut was later rejected,\nbecause it is not that interesting and has limited use.\nA building and war game on the other hand,\nis easy to extend or to adapt.\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests.\n* [ ] Do not work too much on it, as long as #8 and #9 are not implemented yet.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [ ] Create HTML renderer for table.\n   * [ ] Create complete page renderer for table.\n   * [ ] Register renderer to all tables via Dem aspects and object paths.\n   * [ ] Make it easy to activate this aspect via Dem config.\n   * [ ] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.\n      * [ ] Document this in general Java project guidelines.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Create building and war game based on X players.\n   * [ ] Implement game of life with 2 players.\n   * [ ] Implement game of life with 2 players, where the players can attack each other.\n    * [ ] Implement game of life with 2 players, where the players can make a decision.\n* [x] Find a name: crisis network = cin\n# Ideas for Advanced versions\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1663457738,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjQT-PA"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"# Context\nThe initial idea for the optimization framework was,\nto create a modeler for complex optimization systems.\nThereby, as system was planned to be executable given a set of events.\nIt should be analyzable in order to extract knowledge for a given optimization system.\nAlso, the optimization of such a system would have a vast variarity of applications.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames with multiple actors are extraordinarily different to other optimization problems\nand would provide a great challenge for this project.\nIt may also be a way to attract the public to this project.\n\nInitially, the implementation of chess was planned,\nbut was later rejected,\nbecause it is not that interesting and has limited use.\nA building and war game on the other hand,\nis easy to extend or to adapt.\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests.\n* [ ] Do not work too much on it, as long as #8 and #9 are not implemented yet.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create HTML renderer for table.\n   * [ ] Create complete page renderer for table.\n   * [ ] Register renderer to all tables via Dem aspects and object paths.\n   * [ ] Make it easy to activate this aspect via Dem config.\n   * [ ] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.\n      * [ ] Document this in general Java project guidelines.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Create building and war game based on X players.\n   * [ ] Implement game of life with 2 players.\n   * [ ] Implement game of life with 2 players, where the players can attack each other.\n    * [ ] Implement game of life with 2 players, where the players can make a decision.\n* [x] Find a name: crisis network = cin\n# Ideas for Advanced versions\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1663457741,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjQT-PI"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"# Context\nThe initial idea for the optimization framework was,\nto create a modeler for complex optimization systems.\nThereby, as system was planned to be executable given a set of events.\nIt should be analyzable in order to extract knowledge for a given optimization system.\nAlso, the optimization of such a system would have a vast variarity of applications.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames with multiple actors are extraordinarily different to other optimization problems\nand would provide a great challenge for this project.\nIt may also be a way to attract the public to this project.\n\nInitially, the implementation of chess was planned,\nbut was later rejected,\nbecause it is not that interesting and has limited use.\nA building and war game on the other hand,\nis easy to extend or to adapt.\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests.\n* [ ] Do not work too much on it, as long as #8 and #9 are not implemented yet.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [ ] Register renderer to all tables via Dem aspects and object paths.\n   * [ ] Make it easy to activate this aspect via Dem config.\n   * [ ] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.\n      * [ ] Document this in general Java project guidelines.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Create building and war game based on X players.\n   * [ ] Implement game of life with 2 players.\n   * [ ] Implement game of life with 2 players, where the players can attack each other.\n    * [ ] Implement game of life with 2 players, where the players can make a decision.\n* [x] Find a name: crisis network = cin\n# Ideas for Advanced versions\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1663458012,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjQT--I"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"# Context\nThe initial idea for the optimization framework was,\nto create a modeler for complex optimization systems.\nThereby, as system was planned to be executable given a set of events.\nIt should be analyzable in order to extract knowledge for a given optimization system.\nAlso, the optimization of such a system would have a vast variarity of applications.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames with multiple actors are extraordinarily different to other optimization problems\nand would provide a great challenge for this project.\nIt may also be a way to attract the public to this project.\n\nInitially, the implementation of chess was planned,\nbut was later rejected,\nbecause it is not that interesting and has limited use.\nA building and war game on the other hand,\nis easy to extend or to adapt.\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests.\n* [ ] Do not work too much on it, as long as #8 and #9 are not implemented yet.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [ ] Register renderer to all tables via Dem aspects and object paths.\n   * [ ] Make it easy to activate this aspect via Dem config.\n   * [ ] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.\n      * [ ] Document this in general Java project guidelines.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Create building and war game based on X players.\n   * [ ] Implement game of life with 2 players.\n   * [ ] Implement game of life with 2 players, where the players can attack each other.\n    * [ ] Implement game of life with 2 players, where the players can make a decision.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reason for name.\n* [ ] Clean up GUI and make it bearable.\n# Ideas for Advanced versions\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1663458034,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjQT_CY"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"# Context\nThe initial idea for the optimization framework was,\nto create a modeler for complex optimization systems.\nThereby, as system was planned to be executable given a set of events.\nIt should be analyzable in order to extract knowledge for a given optimization system.\nAlso, the optimization of such a system would have a vast variarity of applications.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames with multiple actors are extraordinarily different to other optimization problems\nand would provide a great challenge for this project.\nIt may also be a way to attract the public to this project.\n\nInitially, the implementation of chess was planned,\nbut was later rejected,\nbecause it is not that interesting and has limited use.\nA building and war game on the other hand,\nis easy to extend or to adapt.\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests.\n* [ ] Do not work too much on it, as long as #8 and #9 are not implemented yet.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [ ] Register renderer to all tables via Dem aspects and object paths.\n   * [ ] Make it easy to activate this aspect via Dem config.\n   * [ ] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.\n      * [ ] Document this in general Java project guidelines.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Create building and war game based on X players.\n   * [ ] Implement game of life with 2 players.\n   * [ ] Implement game of life with 2 players, where the players can attack each other.\n    * [ ] Implement game of life with 2 players, where the players can make a decision.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reason for name.\n* [ ] Clean up GUI and make it usable and somewhat nice.\n# Ideas for Advanced versions\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1663499655,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjQVo8w"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"# Context\nThe initial idea for the optimization framework was,\nto create a modeler for complex optimization systems.\nThereby, as system was planned to be executable given a set of events.\nIt should be analyzable in order to extract knowledge for a given optimization system.\nAlso, the optimization of such a system would have a vast variarity of applications.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames with multiple actors are extraordinarily different to other optimization problems\nand would provide a great challenge for this project.\nIt may also be a way to attract the public to this project.\n\nInitially, the implementation of chess was planned,\nbut was later rejected,\nbecause it is not that interesting and has limited use.\nA building and war game on the other hand,\nis easy to extend or to adapt.\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests.\n* [ ] Do not work too much on it, as long as #8 and #9 are not implemented yet.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [ ] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [ ] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [ ] Register renderer to all tables via Dem aspects and object paths.\n   * [ ] Make it easy to activate this aspect via Dem config.\n   * [ ] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.\n      * [ ] Document this in general Java project guidelines.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Create building and war game based on X players.\n   * [ ] Implement game of life with 2 players.\n   * [ ] Implement game of life with 2 players, where the players can attack each other.\n    * [ ] Implement game of life with 2 players, where the players can make a decision.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reason for name.\n* [ ] Clean up GUI and make it usable and somewhat nice.\n# Ideas for Advanced versions\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1664049906,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjRs624"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"# Context\nThe initial idea for the optimization framework was,\nto create a modeler for complex optimization systems.\nThereby, as system was planned to be executable given a set of events.\nIt should be analyzable in order to extract knowledge for a given optimization system.\nAlso, the optimization of such a system would have a vast variarity of applications.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames with multiple actors are extraordinarily different to other optimization problems\nand would provide a great challenge for this project.\nIt may also be a way to attract the public to this project.\n\nInitially, the implementation of chess was planned,\nbut was later rejected,\nbecause it is not that interesting and has limited use.\nA building and war game on the other hand,\nis easy to extend or to adapt.\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests.\n* [ ] Do not work too much on it, as long as #8 and #9 are not implemented yet.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [ ] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [ ] Register renderer to all tables via Dem aspects and object paths.\n   * [ ] Make it easy to activate this aspect via Dem config.\n   * [ ] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.\n      * [ ] Document this in general Java project guidelines.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Create building and war game based on X players.\n   * [ ] Implement game of life with 2 players.\n   * [ ] Implement game of life with 2 players, where the players can attack each other.\n    * [ ] Implement game of life with 2 players, where the players can make a decision.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reason for name.\n* [ ] Clean up GUI and make it usable and somewhat nice.\n# Ideas for Advanced versions\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1664049917,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjRs65E"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"# Context\nThe initial idea for the optimization framework was,\nto create a modeler for complex optimization systems.\nThereby, as system was planned to be executable given a set of events.\nIt should be analyzable in order to extract knowledge for a given optimization system.\nAlso, the optimization of such a system would have a vast variarity of applications.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames with multiple actors are extraordinarily different to other optimization problems\nand would provide a great challenge for this project.\nIt may also be a way to attract the public to this project.\n\nInitially, the implementation of chess was planned,\nbut was later rejected,\nbecause it is not that interesting and has limited use.\nA building and war game on the other hand,\nis easy to extend or to adapt.\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests.\n* [ ] Do not work too much on it, as long as #8 and #9 are not implemented yet.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [ ] Register renderer to all tables via Dem aspects and object paths.\n   * [ ] Make it easy to activate this aspect via Dem config.\n   * [ ] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.\n      * [ ] Document this in general Java project guidelines.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Create building and war game based on X players.\n   * [ ] Implement game of life with 2 players.\n   * [ ] Implement game of life with 2 players, where the players can attack each other.\n    * [ ] Implement game of life with 2 players, where the players can make a decision.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reason for name.\n* [ ] Clean up GUI and make it usable and somewhat nice.\n# Ideas for Advanced versions\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1664923047,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjT2MmE"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"This is currently the main new feature.\n\n# Context\nThe initial idea for the optimization framework long ago was\nto create a modeller for complex optimization systems.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames are inherently the same,\nbut cover a wider field (not just economics) is better advertizable.\n\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests by combining test problems and thereby creating bigger and more complex problems and test data.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create very simple initial HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [ ] Register renderer to all tables via Dem aspects and object paths.\n   * [ ] Make it easy to activate this aspect via Dem config.\n   * [ ] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.\n      * [ ] Document this in general Java project guidelines.\n   * [ ] Create constraint renderer.\n   * [ ] Create dynamic 3D world viewer (currently only Git repo worlds are rendered).\n   * [ ] Create constraint editor.\n   * [ ] Create table editor.\n  * [ ] Make game usable on Steam Deck.\n     * [ ] Integrate controller via Web Gamepad API, which makes should make it possible to move the camera through the world.\n     * [ ] Make it possible to switch between views of 3D world, tables and constraints.\n     * [ ] Make game easily installable on Steam Deck via Flatpak: #195\n  * [ ] Clean up GUI and make it usable and somewhat nice.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Implement game of life with 2 players.\n* [ ] Implement game of life with 2 players, where each player has choices and wants to maximize its liveness.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reasoning for name.\n# Ideas for Advanced versions\n* [ ] Create automatic game instance reporter for local execution and social media advertisment.\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1664923301,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjT2PDo"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"This is currently the main new feature.\n\n# Context\nThe initial idea for the optimization framework long ago was\nto create a modeller for complex optimization systems.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames are inherently the same,\nbut cover a wider field (not just economics) is better advertizable.\n\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests by combining test problems and thereby creating bigger and more complex problems and test data.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create very simple initial HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [ ] Register renderer to all tables via Dem aspects and object paths.\n   * [ ] Make it easy to activate this aspect via Dem config.\n   * [ ] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.\n      * [ ] Document this in general Java project guidelines.\n   * [ ] Create constraint renderer.\n   * [ ] Create dynamic 3D world viewer (currently only Git repo worlds are rendered).\n   * [ ] Create constraint editor.\n   * [ ] Create table editor.\n  * [ ] Make game usable on Steam Deck.\n     * [ ] Integrate controller via Web Gamepad API, which makes should make it possible to move the camera through the world.\n     * [ ] Make it possible to switch between views of 3D world, tables and constraints.\n     * [ ] Make game easily installable on Steam Deck via Flatpak: #195\n  * [ ] Clean up GUI and make it usable and somewhat nice.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Implement game of life with 2 players.\n* [ ] Implement game of life with 2 players, where each player has choices and wants to maximize its liveness.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reasoning for name.\n# Ideas for Advanced versions\n* [ ] Create automatic game instance reporter for local execution and social media advertisement.\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).\n* [ ] Make this a blockchain game and thereby trigger people.\n* [ ] Run public server.\n* [ ] Run private server with public results.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1664923315,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjT2PNQ"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"This is currently the main new feature.\n\n# Context\nThe initial idea for the optimization framework long ago was\nto create a modeller for complex optimization systems.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames are inherently the same,\nbut cover a wider field (not just economics) is better advertizable.\n\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests by combining test problems and thereby creating bigger and more complex problems and test data.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create very simple initial HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [ ] Register renderer to all tables via Dem aspects and object paths.\n   * [ ] Make it easy to activate this aspect via Dem config.\n   * [ ] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.\n      * [ ] Document this in general Java project guidelines.\n   * [ ] Create constraint renderer.\n   * [ ] Create dynamic 3D world viewer (currently only Git repo worlds are rendered).\n   * [ ] Create constraint editor.\n   * [ ] Create table editor.\n  * [ ] Make game usable on Steam Deck.\n     * [ ] Integrate controller via Web Gamepad API, which makes should make it possible to move the camera through the world.\n     * [ ] Make it possible to switch between views of 3D world, tables and constraints.\n     * [ ] Make game easily installable on Steam Deck via Flatpak: #195\n  * [ ] Clean up GUI and make it usable and somewhat nice.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Implement game of life with 2 players.\n* [ ] Implement game of life with 2 players, where each player has choices and wants to maximize its liveness.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reasoning for name.\n# Ideas for Advanced versions\n* [ ] Create automatic game instance reporter for local execution and social media advertisement.\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).\n* [ ] Make this a blockchain game and thereby trigger people.\n* [ ] Run public server.\n* [ ] Run private server with public world result state.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1664923358,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjT2Poc"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"This is currently the main new feature.\n\n# Context\nThe initial idea for the optimization framework long ago was\nto create a modeller for complex optimization systems.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames are inherently the same,\nbut cover a wider field (not just economics) is better advertizable.\n\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests by combining test problems and thereby creating bigger and more complex problems and test data.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create very simple initial HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [ ] Register renderer to all tables via Dem aspects and object paths.\n   * [ ] Make it easy to activate this aspect via Dem config.\n   * [ ] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.\n      * [ ] Document this in general Java project guidelines.\n   * [ ] Create constraint renderer.\n   * [ ] Create dynamic 3D world viewer (currently only Git repo worlds are rendered).\n   * [ ] Create constraint editor.\n   * [ ] Create table editor.\n  * [ ] Make game usable on Steam Deck.\n     * [ ] Integrate controller via Web Gamepad API, which makes should make it possible to move the camera through the world.\n     * [ ] Make it possible to switch between views of 3D world, tables and constraints.\n     * [ ] Make game easily installable on Steam Deck via Flatpak: #195\n  * [ ] Clean up GUI and make it usable and somewhat nice.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Implement game of life with 2 players.\n* [ ] Implement game of life with 2 players, where each player has choices and wants to maximize its liveness.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reasoning for name.\n* [ ] Run private server with public world result state.\n# Ideas For Future Tickets\n* [ ] Create automatic game instance reporter for local execution and social media advertisement.\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).\n* [ ] Make this a blockchain game and thereby trigger people.\n* [ ] Run public server.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1666126611,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjWtoPM"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"This is currently the main new feature.\n\n# Context\nThe initial idea for the optimization framework long ago was\nto create a modeller for complex optimization systems.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames are inherently the same,\nbut cover a wider field (not just economics) is better advertizable.\n\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests by combining test problems and thereby creating bigger and more complex problems and test data.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create very simple initial HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [x] Register renderer to all tables via Dem aspects and object paths.\n   * [x] Make it easy to activate this aspect via Dem config.\n   * [ ] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.\n      * [ ] Document this in general Java project guidelines.\n   * [ ] Create constraint renderer.\n   * [ ] Create dynamic 3D world viewer (currently only Git repo worlds are rendered).\n   * [ ] Create constraint editor.\n   * [ ] Create table editor.\n  * [ ] Make game usable on Steam Deck.\n     * [ ] Integrate controller via Web Gamepad API, which makes should make it possible to move the camera through the world.\n     * [ ] Make it possible to switch between views of 3D world, tables and constraints.\n     * [ ] Make game easily installable on Steam Deck via Flatpak: #195\n  * [ ] Clean up GUI and make it usable and somewhat nice.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Implement game of life with 2 players.\n* [ ] Implement game of life with 2 players, where each player has choices and wants to maximize its liveness.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reasoning for name.\n* [ ] Run private server with public world result state.\n# Ideas For Future Tickets\n* [ ] Create automatic game instance reporter for local execution and social media advertisement.\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).\n* [ ] Make this a blockchain game and thereby trigger people.\n* [ ] Run public server.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1666128065,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjWt-C8"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"This is currently the main new feature.\n\n# Context\nThe initial idea for the optimization framework long ago was\nto create a modeller for complex optimization systems.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames are inherently the same,\nbut cover a wider field (not just economics) is better advertizable.\n\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests by combining test problems and thereby creating bigger and more complex problems and test data.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create very simple initial HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [x] Register renderer to all tables via Dem aspects and object paths.\n   * [x] Make it easy to activate this aspect via Dem config.\n   * [ ] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.  -\u003e This is not needed for now.\n      * [ ] Document this in general Java project guidelines.  -\u003e This is not needed for now.\n   * [ ] Create constraint renderer.\n   * [ ] Create dynamic 3D world viewer (currently only Git repo worlds are rendered).\n   * [ ] Create constraint editor.\n   * [ ] Create table editor.\n  * [ ] Make game usable on Steam Deck.\n     * [ ] Integrate controller via Web Gamepad API, which makes should make it possible to move the camera through the world.\n     * [ ] Make it possible to switch between views of 3D world, tables and constraints.\n     * [ ] Make game easily installable on Steam Deck via Flatpak: #195\n  * [ ] Clean up GUI and make it usable and somewhat nice.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Implement game of life with 2 players.\n* [ ] Implement game of life with 2 players, where each player has choices and wants to maximize its liveness.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reasoning for name.\n* [ ] Run private server with public world result state.\n# Ideas For Future Tickets\n* [ ] Create automatic game instance reporter for local execution and social media advertisement.\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).\n* [ ] Make this a blockchain game and thereby trigger people.\n* [ ] Run public server.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1666128068,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjWt-Fg"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"This is currently the main new feature.\n\n# Context\nThe initial idea for the optimization framework long ago was\nto create a modeller for complex optimization systems.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames are inherently the same,\nbut cover a wider field (not just economics) is better advertizable.\n\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests by combining test problems and thereby creating bigger and more complex problems and test data.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create very simple initial HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [x] Register renderer to all tables via Dem aspects and object paths.\n   * [x] Make it easy to activate this aspect via Dem config.\n   * [ ] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.  -\u003e This is not needed for now.\n      * [x] Document this in general Java project guidelines.  -\u003e This is not needed for now.\n   * [ ] Create constraint renderer.\n   * [ ] Create dynamic 3D world viewer (currently only Git repo worlds are rendered).\n   * [ ] Create constraint editor.\n   * [ ] Create table editor.\n  * [ ] Make game usable on Steam Deck.\n     * [ ] Integrate controller via Web Gamepad API, which makes should make it possible to move the camera through the world.\n     * [ ] Make it possible to switch between views of 3D world, tables and constraints.\n     * [ ] Make game easily installable on Steam Deck via Flatpak: #195\n  * [ ] Clean up GUI and make it usable and somewhat nice.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Implement game of life with 2 players.\n* [ ] Implement game of life with 2 players, where each player has choices and wants to maximize its liveness.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reasoning for name.\n* [ ] Run private server with public world result state.\n# Ideas For Future Tickets\n* [ ] Create automatic game instance reporter for local execution and social media advertisement.\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).\n* [ ] Make this a blockchain game and thereby trigger people.\n* [ ] Run public server.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1666128070,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjWt-H0"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"This is currently the main new feature.\n\n# Context\nThe initial idea for the optimization framework long ago was\nto create a modeller for complex optimization systems.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames are inherently the same,\nbut cover a wider field (not just economics) is better advertizable.\n\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests by combining test problems and thereby creating bigger and more complex problems and test data.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create very simple initial HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [x] Register renderer to all tables via Dem aspects and object paths.\n   * [x] Make it easy to activate this aspect via Dem config.\n   * [x] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.  -\u003e This is not needed for now.\n      * [x] Document this in general Java project guidelines.  -\u003e This is not needed for now.\n   * [ ] Create constraint renderer.\n   * [ ] Create dynamic 3D world viewer (currently only Git repo worlds are rendered).\n   * [ ] Create constraint editor.\n   * [ ] Create table editor.\n  * [ ] Make game usable on Steam Deck.\n     * [ ] Integrate controller via Web Gamepad API, which makes should make it possible to move the camera through the world.\n     * [ ] Make it possible to switch between views of 3D world, tables and constraints.\n     * [ ] Make game easily installable on Steam Deck via Flatpak: #195\n  * [ ] Clean up GUI and make it usable and somewhat nice.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Implement game of life with 2 players.\n* [ ] Implement game of life with 2 players, where each player has choices and wants to maximize its liveness.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reasoning for name.\n* [ ] Run private server with public world result state.\n# Ideas For Future Tickets\n* [ ] Create automatic game instance reporter for local execution and social media advertisement.\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).\n* [ ] Make this a blockchain game and thereby trigger people.\n* [ ] Run public server.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1666203179,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjW9_v8"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"This is currently the main new feature.\n\n# Context\nThe initial idea for the optimization framework long ago was\nto create a modeller for complex optimization systems.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames are inherently the same,\nbut cover a wider field (not just economics) is better advertizable.\n\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests by combining test problems and thereby creating bigger and more complex problems and test data.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create very simple initial HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [x] Register renderer to all tables via Dem aspects and object paths.\n   * [x] Make it easy to activate this aspect via Dem config.\n   * [x] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.  -\u003e This is not needed for now.\n      * [x] Document this in general Java project guidelines.  -\u003e This is not needed for now.\n   * [ ] Create constraint renderer.\n   * [ ] Fix layout issue. Otherwise it is hard to find the correct paths via GUI: https://todo.sr.ht/~splitcells-net/net.splitcells.network/108\n   * [ ] Create dynamic 3D world viewer (currently only Git repo worlds are rendered).\n   * [ ] Create constraint editor.\n   * [ ] Create table editor.\n  * [ ] Make game usable on Steam Deck.\n     * [ ] Integrate controller via Web Gamepad API, which makes should make it possible to move the camera through the world.\n     * [ ] Make it possible to switch between views of 3D world, tables and constraints.\n     * [ ] Make game easily installable on Steam Deck via Flatpak: #195\n  * [ ] Clean up GUI and make it usable and somewhat nice.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Implement game of life with 2 players.\n* [ ] Implement game of life with 2 players, where each player has choices and wants to maximize its liveness.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reasoning for name.\n* [ ] Run private server with public world result state.\n# Ideas For Future Tickets\n* [ ] Create automatic game instance reporter for local execution and social media advertisement.\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).\n* [ ] Make this a blockchain game and thereby trigger people.\n* [ ] Run public server.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1666297170,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjXRKho"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"This is currently the main new feature.\n\n# Context\nThe initial idea for the optimization framework long ago was\nto create a modeller for complex optimization systems.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames are inherently the same,\nbut cover a wider field (not just economics) is better advertizable.\n\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests by combining test problems and thereby creating bigger and more complex problems and test data.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create very simple initial HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [x] Register renderer to all tables via Dem aspects and object paths.\n   * [x] Make it easy to activate this aspect via Dem config.\n   * [x] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.  -\u003e This is not needed for now.\n      * [x] Document this in general Java project guidelines.  -\u003e This is not needed for now.\n   * [ ] Create constraint renderer.\n   * [x] Fix layout issue. Otherwise it is hard to find the correct paths via GUI: https://todo.sr.ht/~splitcells-net/net.splitcells.network/108\n   * [ ] Create dynamic 3D world viewer (currently only Git repo worlds are rendered).\n   * [ ] Create constraint editor.\n   * [ ] Create table editor.\n  * [ ] Make game usable on Steam Deck.\n     * [ ] Integrate controller via Web Gamepad API, which makes should make it possible to move the camera through the world.\n     * [ ] Make it possible to switch between views of 3D world, tables and constraints.\n     * [ ] Make game easily installable on Steam Deck via Flatpak: #195\n  * [ ] Clean up GUI and make it usable and somewhat nice.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Implement game of life with 2 players.\n* [ ] Implement game of life with 2 players, where each player has choices and wants to maximize its liveness.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reasoning for name.\n* [ ] Run private server with public world result state.\n# Ideas For Future Tickets\n* [ ] Create automatic game instance reporter for local execution and social media advertisement.\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).\n* [ ] Make this a blockchain game and thereby trigger people.\n* [ ] Run public server.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1666811640,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjYg1Vo"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"This is currently the main new feature.\n\n# Context\nThe initial idea for the optimization framework long ago was\nto create a modeller for complex optimization systems.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames are inherently the same,\nbut cover a wider field (not just economics) is better advertizable.\n\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests by combining test problems and thereby creating bigger and more complex problems and test data.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create very simple initial HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [x] Register renderer to all tables via Dem aspects and object paths.\n   * [x] Make it easy to activate this aspect via Dem config.\n   * [x] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.  -\u003e This is not needed for now.\n      * [x] Document this in general Java project guidelines.  -\u003e This is not needed for now.\n   * [x] Fix layout issue. Otherwise it is hard to find the correct paths via GUI: https://todo.sr.ht/~splitcells-net/net.splitcells.network/108\n   * [ ] Create dynamic 3D world viewer (currently only Git repo worlds are rendered).\n  * [ ] Make game usable on Steam Deck.\n     * [ ] Integrate controller via Web Gamepad API, which makes should make it possible to move the camera through the world.\n     * [ ] Make it possible to switch between views of 3D world, tables and constraints.\n     * [ ] Make game easily installable on Steam Deck via Flatpak: #195\n  * [ ] Clean up GUI and make it usable and somewhat nice.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Implement game of life with 2 players.\n* [ ] Implement game of life with 2 players, where each player has choices and wants to maximize its liveness.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reasoning for name.\n* [ ] Run private server with public world result state.\n# Ideas For Future Tickets\n* [ ] Create constraint renderer.\n* [ ] Create constraint editor.\n* [ ] Create table editor.\n* [ ] Create automatic game instance reporter for local execution and social media advertisement.\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).\n* [ ] Make this a blockchain game and thereby trigger people.\n* [ ] Run public server.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1666815007,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjYhmds"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"This is currently the main new feature.\n\n# Context\nThe initial idea for the optimization framework long ago was\nto create a modeller for complex optimization systems.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames are inherently the same,\nbut cover a wider field (not just economics) is better advertizable.\n\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests by combining test problems and thereby creating bigger and more complex problems and test data.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create very simple initial HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [x] Register renderer to all tables via Dem aspects and object paths.\n   * [x] Make it easy to activate this aspect via Dem config.\n   * [x] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.  -\u003e This is not needed for now.\n      * [x] Document this in general Java project guidelines.  -\u003e This is not needed for now.\n   * [x] Fix layout issue. Otherwise it is hard to find the correct paths via GUI: https://todo.sr.ht/~splitcells-net/net.splitcells.network/108\n   * [ ] Create dynamic 3D world viewer (currently only Git repo worlds are rendered).\n  * [ ] Make game usable on Steam Deck.\n     * [ ] Integrate controller via Web Gamepad API, which makes should make it possible to move the camera through the world.\n     * [ ] Make it possible to switch between views of 3D world, tables and constraints.\n     * [ ] Make game easily installable on Steam Deck via Flatpak: #195\n  * [ ] Clean up GUI and make it usable and somewhat nice.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Implement game of life with 2 players.\n* [ ] Implement game of life with 2 players, where each player has choices and wants to maximize its liveness.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reasoning for name.\n* [ ] Run private server with public world result state.\n# Ideas For Future Tickets\n* [ ] Create constraint renderer.\n* [ ] Create constraint editor.\n* [ ] Create table editor.\n* [ ] Create automatic game instance reporter for local execution and social media advertisement.\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).\n* [ ] Make this a blockchain game and thereby trigger people.\n* [ ] Run public server.\n* [ ] Create a world presenter.\n   * [ ] https://www.theatrejs.com/","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1666900631,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjYzEV8"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"This is currently the main new feature.\n\n# Context\nThe initial idea for the optimization framework long ago was\nto create a modeller for complex optimization systems.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames are inherently the same,\nbut cover a wider field (not just economics) is better advertizable.\n\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests by combining test problems and thereby creating bigger and more complex problems and test data.\n* [x] Create a very simple renderer for it.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create very simple initial HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [x] Register renderer to all tables via Dem aspects and object paths.\n   * [x] Make it easy to activate this aspect via Dem config.\n   * [ ] Add project files in `src/main/html` to path context and make thereby the fullscreen version of renderer discoverable on the website.\n   * [x] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.  -\u003e This is not needed for now.\n      * [x] Document this in general Java project guidelines.  -\u003e This is not needed for now.\n   * [x] Fix layout issue. Otherwise it is hard to find the correct paths via GUI: https://todo.sr.ht/~splitcells-net/net.splitcells.network/108\n   * [ ] Create dynamic 3D world viewer (currently only Git repo worlds are rendered).\n  * [ ] Make game usable on Steam Deck.\n     * [ ] Integrate controller via Web Gamepad API, which makes should make it possible to move the camera through the world.\n     * [ ] Make it possible to switch between views of 3D world, tables and constraints.\n     * [ ] Make game easily installable on Steam Deck via Flatpak: #195\n  * [ ] Clean up GUI and make it usable and somewhat nice.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Implement game of life with 2 players.\n* [ ] Implement game of life with 2 players, where each player has choices and wants to maximize its liveness.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reasoning for name.\n* [ ] Run private server with public world result state.\n# Ideas For Future Tickets\n* [ ] Create constraint renderer.\n* [ ] Create constraint editor.\n* [ ] Create table editor.\n* [ ] Create automatic game instance reporter for local execution and social media advertisement.\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).\n* [ ] Make this a blockchain game and thereby trigger people.\n* [ ] Run public server.\n* [ ] Create a world presenter.\n   * [ ] https://www.theatrejs.com/","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1667599137,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjanJMY"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"This is currently the main new feature.\n\n# Context\nThe initial idea for the optimization framework long ago was\nto create a modeller for complex optimization systems.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames are inherently the same,\nbut cover a wider field (not just economics) is better advertizable.\n\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests by combining test problems and thereby creating bigger and more complex problems and test data.\n* [x] Create a very simple renderer for it.\n* [ ] Provide unsecured local website for testing.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create very simple initial HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [x] Register renderer to all tables via Dem aspects and object paths.\n   * [x] Make it easy to activate this aspect via Dem config.\n   * [ ] Add project files in `src/main/html` to path context and make thereby the fullscreen version of renderer discoverable on the website.\n   * [x] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.  -\u003e This is not needed for now.\n      * [x] Document this in general Java project guidelines.  -\u003e This is not needed for now.\n   * [x] Fix layout issue. Otherwise it is hard to find the correct paths via GUI: https://todo.sr.ht/~splitcells-net/net.splitcells.network/108\n   * [ ] Create dynamic 3D world viewer (currently only Git repo worlds are rendered).\n  * [ ] Make game usable on Steam Deck.\n     * [ ] Integrate controller via Web Gamepad API, which makes should make it possible to move the camera through the world.\n     * [ ] Make it possible to switch between views of 3D world, tables and constraints.\n     * [ ] Make game easily installable on Steam Deck via Flatpak: #195\n  * [ ] Clean up GUI and make it usable and somewhat nice.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Implement game of life with 2 players.\n* [ ] Implement game of life with 2 players, where each player has choices and wants to maximize its liveness.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reasoning for name.\n* [ ] Run private server with public world result state.\n# Ideas For Future Tickets\n* [ ] Create constraint renderer.\n* [ ] Create constraint editor.\n* [ ] Create table editor.\n* [ ] Create automatic game instance reporter for local execution and social media advertisement.\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).\n* [ ] Make this a blockchain game and thereby trigger people.\n* [ ] Run public server.\n* [ ] Create a world presenter.\n   * [ ] https://www.theatrejs.com/","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1667692859,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjatH0g"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"This is currently the main new feature.\n\n# Context\nThe initial idea for the optimization framework long ago was\nto create a modeller for complex optimization systems.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames are inherently the same,\nbut cover a wider field (not just economics) is better advertizable.\n\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests by combining test problems and thereby creating bigger and more complex problems and test data.\n* [x] Create a very simple renderer for it.\n* [x] Provide unsecured local website for testing. -\u003e Not needed. Adjustments to the standard website deployment, create a client good enough for testing.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create very simple initial HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [x] Register renderer to all tables via Dem aspects and object paths.\n   * [x] Make it easy to activate this aspect via Dem config.\n   * [ ] Add project files in `src/main/html` to path context and make thereby the fullscreen version of renderer discoverable on the website.\n   * [x] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.  -\u003e This is not needed for now.\n      * [x] Document this in general Java project guidelines.  -\u003e This is not needed for now.\n   * [x] Fix layout issue. Otherwise it is hard to find the correct paths via GUI: https://todo.sr.ht/~splitcells-net/net.splitcells.network/108\n   * [ ] Create dynamic 3D world viewer (currently only Git repo worlds are rendered).\n  * [ ] Make game usable on Steam Deck.\n     * [ ] Integrate controller via Web Gamepad API, which makes should make it possible to move the camera through the world.\n     * [ ] Make it possible to switch between views of 3D world, tables and constraints.\n     * [ ] Make game easily installable on Steam Deck via Flatpak: #195\n  * [ ] Clean up GUI and make it usable and somewhat nice.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Implement game of life with 2 players.\n* [ ] Implement game of life with 2 players, where each player has choices and wants to maximize its liveness.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reasoning for name.\n* [ ] Run private server with public world result state.\n# Ideas For Future Tickets\n* [ ] Create constraint renderer.\n* [ ] Create constraint editor.\n* [ ] Create table editor.\n* [ ] Create automatic game instance reporter for local execution and social media advertisement.\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).\n* [ ] Make this a blockchain game and thereby trigger people.\n* [ ] Run public server.\n* [ ] Create a world presenter.\n   * [ ] https://www.theatrejs.com/","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1667696070,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjatSk4"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"This is currently the main new feature.\n\n# Context\nThe initial idea for the optimization framework long ago was\nto create a modeller for complex optimization systems.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames are inherently the same,\nbut cover a wider field (not just economics) is better advertizable.\n\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests by combining test problems and thereby creating bigger and more complex problems and test data.\n* [x] Create a very simple renderer for it.\n* [x] Provide unsecured local website for testing. -\u003e Not needed. Adjustments to the standard website deployment, create a client good enough for testing.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create very simple initial HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [x] Register renderer to all tables via Dem aspects and object paths.\n   * [x] Make it easy to activate this aspect via Dem config.\n   * [ ] Add project files in `src/main/html` to path context and make thereby the fullscreen version of renderer discoverable on the website.\n   * [x] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.  -\u003e This is not needed for now.\n      * [x] Document this in general Java project guidelines.  -\u003e This is not needed for now.\n   * [x] Fix layout issue. Otherwise it is hard to find the correct paths via GUI: https://todo.sr.ht/~splitcells-net/net.splitcells.network/108\n   * [ ] Create dynamic 3D world viewer (currently only Git repo worlds are rendered).\n  * [ ] Make game usable on Steam Deck.\n     * [ ] Integrate controller via Web Gamepad API, which makes should make it possible to move the camera through the world.\n     * [ ] Make it possible to switch between views of 3D world, tables and constraints.\n     * [ ] Make game easily installable on Steam Deck via Flatpak: #195\n  * [ ] Clean up GUI and make it usable and somewhat nice.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Implement game of life with 2 players.\n* [ ] Implement game of life with 2 players, where each player has choices and wants to maximize its liveness.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reasoning for name.\n* [ ] Run private server with public world result state.\n# Ideas For Future Tickets\n* [ ] Create constraint renderer.\n* [ ] Create constraint editor.\n* [ ] Create table editor.\n* [ ] Create automatic game instance reporter for local execution and social media advertisement.\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).\n* [ ] Make this a blockchain game and thereby trigger people.\n* [ ] Run public server.\n* [ ] Create a world presenter.\n   * [ ] https://www.theatrejs.com/\n* [ ] Visualize optimization and table network overview.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1669322721,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zje6HO8"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"This is currently the main new feature.\n\n# Context\nThe initial idea for the optimization framework long ago was\nto create a modeller for complex optimization systems.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames are inherently the same,\nbut cover a wider field (not just economics) is better advertizable.\n\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests by combining test problems and thereby creating bigger and more complex problems and test data.\n* [x] Create a very simple renderer for it.\n* [x] Provide unsecured local website for testing. -\u003e Not needed. Adjustments to the standard website deployment, create a client good enough for testing.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create very simple initial HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [x] Register renderer to all tables via Dem aspects and object paths.\n   * [x] Make it easy to activate this aspect via Dem config.\n   * [ ] Add project files in `src/main/html` to path context and make thereby the fullscreen version of renderer discoverable on the website.\n   * [x] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.  -\u003e This is not needed for now.\n      * [x] Document this in general Java project guidelines.  -\u003e This is not needed for now.\n   * [x] Fix layout issue. Otherwise it is hard to find the correct paths via GUI: https://todo.sr.ht/~splitcells-net/net.splitcells.network/108\n   * [ ] Create dynamic 3D world viewer (currently only Git repo worlds are rendered).\n  * [ ] Make game usable on Steam Deck.\n     * [ ] Integrate controller via Web Gamepad API, which makes should make it possible to move the camera through the world.\n     * [ ] Make it possible to switch between views of 3D world, tables and constraints.\n     * [ ] Make game easily installable on Steam Deck via Flatpak: #195\n  * [ ] Clean up GUI and make it usable and somewhat nice.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n         * [ ] Test with random allocations.\n         * [ ] Check why linear initialization has non linear supply and demand selection.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Implement game of life with 2 players.\n* [ ] Implement game of life with 2 players, where each player has choices and wants to maximize its liveness.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reasoning for name.\n* [ ] Run private server with public world result state.\n# Ideas For Future Tickets\n* [ ] Create constraint renderer.\n* [ ] Create constraint editor.\n* [ ] Create table editor.\n* [ ] Create automatic game instance reporter for local execution and social media advertisement.\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).\n* [ ] Make this a blockchain game and thereby trigger people.\n* [ ] Run public server.\n* [ ] Create a world presenter.\n   * [ ] https://www.theatrejs.com/\n* [ ] Visualize optimization and table network overview.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1669325187,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zje6WsI"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"This is currently the main new feature.\n\n# Context\nThe initial idea for the optimization framework long ago was\nto create a modeller for complex optimization systems.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames are inherently the same,\nbut cover a wider field (not just economics) is better advertizable.\n\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests by combining test problems and thereby creating bigger and more complex problems and test data.\n* [x] Create a very simple renderer for it.\n* [x] Provide unsecured local website for testing. -\u003e Not needed. Adjustments to the standard website deployment, create a client good enough for testing.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create very simple initial HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [x] Register renderer to all tables via Dem aspects and object paths.\n   * [x] Make it easy to activate this aspect via Dem config.\n   * [ ] Add project files in `src/main/html` to path context and make thereby the fullscreen version of renderer discoverable on the website.\n   * [x] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.  -\u003e This is not needed for now.\n      * [x] Document this in general Java project guidelines.  -\u003e This is not needed for now.\n   * [x] Fix layout issue. Otherwise it is hard to find the correct paths via GUI: https://todo.sr.ht/~splitcells-net/net.splitcells.network/108\n   * [ ] Create dynamic 3D world viewer (currently only Git repo worlds are rendered).\n  * [ ] Make game usable on Steam Deck.\n     * [ ] Integrate controller via Web Gamepad API, which makes should make it possible to move the camera through the world.\n     * [ ] Make it possible to switch between views of 3D world, tables and constraints.\n     * [ ] Make game easily installable on Steam Deck via Flatpak: #195\n  * [ ] Clean up GUI and make it usable and somewhat nice.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] timeSteps\n         * [ ] Test time step group content and not just number of groups.\n         * [ ] Test with random allocations.\n         * [x] Check why linear initialization has non linear supply and demand selection.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Implement game of life with 2 players.\n* [ ] Implement game of life with 2 players, where each player has choices and wants to maximize its liveness.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reasoning for name.\n* [ ] Run private server with public world result state.\n# Ideas For Future Tickets\n* [ ] Create constraint renderer.\n* [ ] Create constraint editor.\n* [ ] Create table editor.\n* [ ] Create automatic game instance reporter for local execution and social media advertisement.\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).\n* [ ] Make this a blockchain game and thereby trigger people.\n* [ ] Run public server.\n* [ ] Create a world presenter.\n   * [ ] https://www.theatrejs.com/\n* [ ] Visualize optimization and table network overview.","files":null},{"type":6,"author":{"id":"8f18fdff7c4147cfc375cbcf472669a986e9d714"},"timestamp":1669931417,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjgWap0"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"This is currently the main new feature.\n\n# Context\nThe initial idea for the optimization framework long ago was\nto create a modeller for complex optimization systems.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames are inherently the same,\nbut cover a wider field (not just economics) is better advertizable.\n\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests by combining test problems and thereby creating bigger and more complex problems and test data.\n* [x] Create a very simple renderer for it.\n* [x] Provide unsecured local website for testing. -\u003e Not needed. Adjustments to the standard website deployment, create a client good enough for testing.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create very simple initial HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [x] Register renderer to all tables via Dem aspects and object paths.\n   * [x] Make it easy to activate this aspect via Dem config.\n   * [ ] Add project files in `src/main/html` to path context and make thereby the fullscreen version of renderer discoverable on the website.\n   * [x] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.  -\u003e This is not needed for now.\n      * [x] Document this in general Java project guidelines.  -\u003e This is not needed for now.\n   * [x] Fix layout issue. Otherwise it is hard to find the correct paths via GUI: https://todo.sr.ht/~splitcells-net/net.splitcells.network/108\n   * [ ] Create dynamic 3D world viewer (currently only Git repo worlds are rendered).\n  * [ ] Make game usable on Steam Deck.\n     * [ ] Integrate controller via Web Gamepad API, which makes should make it possible to move the camera through the world.\n     * [ ] Make it possible to switch between views of 3D world, tables and constraints.\n     * [ ] Make game easily installable on Steam Deck via Flatpak: #195\n  * [ ] Clean up GUI and make it usable and somewhat nice.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] Create timeSteps rater.\n         * [ ] Make timeSteps without overlapping groups, because this is not supported. Instead, one can use the instances of timeSteps raters, where one represents start times with even values and one represents start times with odd values. This makes the initial implementation easier, because Gel does not support raters with overlapping groups yet.\n         * [ ] Test time step group content and not just number of groups.\n         * [ ] Test with random allocations.\n         * [x] Check why linear initialization has non linear supply and demand selection.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Implement game of life with 2 players.\n* [ ] Implement game of life with 2 players, where each player has choices and wants to maximize its liveness.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reasoning for name.\n* [ ] Run private server with public world result state.\n# Ideas For Future Tickets\n* [ ] Create constraint renderer.\n* [ ] Create constraint editor.\n* [ ] Create table editor.\n* [ ] Create automatic game instance reporter for local execution and social media advertisement.\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).\n* [ ] Make this a blockchain game and thereby trigger people.\n* [ ] Run public server.\n* [ ] Create a world presenter.\n   * [ ] https://www.theatrejs.com/\n* [ ] Visualize optimization and table network overview.","files":null},{"type":6,"author":{"id":"8f18fdff7c4147cfc375cbcf472669a986e9d714"},"timestamp":1670883663,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjimJqs"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"This is currently the main new feature.\n\n# Context\nThe initial idea for the optimization framework long ago was\nto create a modeller for complex optimization systems.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames are inherently the same,\nbut cover a wider field (not just economics) is better advertizable.\n\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests by combining test problems and thereby creating bigger and more complex problems and test data.\n* [x] Create a very simple renderer for it.\n* [x] Provide unsecured local website for testing. -\u003e Not needed. Adjustments to the standard website deployment, create a client good enough for testing.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create very simple initial HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [x] Register renderer to all tables via Dem aspects and object paths.\n   * [x] Make it easy to activate this aspect via Dem config.\n   * [ ] Add project files in `src/main/html` to path context and make thereby the fullscreen version of renderer discoverable on the website.\n   * [x] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.  -\u003e This is not needed for now.\n      * [x] Document this in general Java project guidelines.  -\u003e This is not needed for now.\n   * [x] Fix layout issue. Otherwise it is hard to find the correct paths via GUI: https://todo.sr.ht/~splitcells-net/net.splitcells.network/108\n   * [ ] Create dynamic 3D world viewer (currently only Git repo worlds are rendered).\n  * [ ] Make game usable on Steam Deck.\n     * [ ] Integrate controller via Web Gamepad API, which makes should make it possible to move the camera through the world.\n     * [ ] Make it possible to switch between views of 3D world, tables and constraints.\n     * [ ] Make game easily installable on Steam Deck via Flatpak: #195\n  * [ ] Clean up GUI and make it usable and somewhat nice.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] Create timeSteps rater.\n         * [ ] Make timeSteps without overlapping groups, because this is not supported. Instead, one can use the instances of timeSteps raters, where one represents start times with even values and one represents start times with odd values. This makes the initial implementation easier, because Gel does not support raters with overlapping groups yet.\n         * [ ] Test time step group content and not just number of groups.\n         * [ ] Test with random allocations.\n         * [x] Check why linear initialization has non-linear supply and demand selection.\n         * [ ] During addition and removal, rating events should be calculated by the rater.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Implement game of life with 2 players.\n* [ ] Implement game of life with 2 players, where each player has choices and wants to maximize its liveness.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reasoning for name.\n* [ ] Run private server with public world result state.\n# Ideas For Future Tickets\n* [ ] Create constraint renderer.\n* [ ] Create constraint editor.\n* [ ] Create table editor.\n* [ ] Create automatic game instance reporter for local execution and social media advertisement.\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).\n* [ ] Make this a blockchain game and thereby trigger people.\n* [ ] Run public server.\n* [ ] Create a world presenter.\n   * [ ] https://www.theatrejs.com/\n* [ ] Visualize optimization and table network overview.","files":null},{"type":6,"author":{"id":"8f18fdff7c4147cfc375cbcf472669a986e9d714"},"timestamp":1670888082,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjinC5s"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"This is currently the main new feature.\n\n# Context\nThe initial idea for the optimization framework long ago was\nto create a modeller for complex optimization systems.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames are inherently the same,\nbut cover a wider field (not just economics) is better advertizable.\n\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests by combining test problems and thereby creating bigger and more complex problems and test data.\n* [x] Create a very simple renderer for it.\n* [x] Provide unsecured local website for testing. -\u003e Not needed. Adjustments to the standard website deployment, create a client good enough for testing.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create very simple initial HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [x] Register renderer to all tables via Dem aspects and object paths.\n   * [x] Make it easy to activate this aspect via Dem config.\n   * [ ] Add project files in `src/main/html` to path context and make thereby the fullscreen version of renderer discoverable on the website.\n   * [x] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.  -\u003e This is not needed for now.\n      * [x] Document this in general Java project guidelines.  -\u003e This is not needed for now.\n   * [x] Fix layout issue. Otherwise it is hard to find the correct paths via GUI: https://todo.sr.ht/~splitcells-net/net.splitcells.network/108\n   * [ ] Create dynamic 3D world viewer (currently only Git repo worlds are rendered).\n  * [ ] Make game usable on Steam Deck.\n     * [ ] Integrate controller via Web Gamepad API, which makes should make it possible to move the camera through the world.\n     * [ ] Make it possible to switch between views of 3D world, tables and constraints.\n     * [ ] Make game easily installable on Steam Deck via Flatpak: #195\n  * [ ] Clean up GUI and make it usable and somewhat nice.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] Create timeSteps rater.\n         * [ ] Make timeSteps without overlapping groups, because this is not supported. Instead, one can use the instances of timeSteps raters, where one represents start times with even values and one represents start times with odd values. This makes the initial implementation easier, because Gel does not support raters with overlapping groups yet.\n         * [ ] Test time step group content and not just number of groups.\n         * [ ] Test with random allocations.\n         * [x] Check why linear initialization has non-linear supply and demand selection.\n         * [x] During addition and removal, rating events should be calculated by the rater.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Implement game of life with 2 players.\n* [ ] Implement game of life with 2 players, where each player has choices and wants to maximize its liveness.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reasoning for name.\n* [ ] Run private server with public world result state.\n# Ideas For Future Tickets\n* [ ] Create constraint renderer.\n* [ ] Create constraint editor.\n* [ ] Create table editor.\n* [ ] Create automatic game instance reporter for local execution and social media advertisement.\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).\n* [ ] Make this a blockchain game and thereby trigger people.\n* [ ] Run public server.\n* [ ] Create a world presenter.\n   * [ ] https://www.theatrejs.com/\n* [ ] Visualize optimization and table network overview.","files":null},{"type":6,"author":{"id":"8f18fdff7c4147cfc375cbcf472669a986e9d714"},"timestamp":1670888813,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjinLEk"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"This is currently the main new feature.\n\n# Context\nThe initial idea for the optimization framework long ago was\nto create a modeller for complex optimization systems.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames are inherently the same,\nbut cover a wider field (not just economics) is better advertizable.\n\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests by combining test problems and thereby creating bigger and more complex problems and test data.\n* [x] Create a very simple renderer for it.\n* [x] Provide unsecured local website for testing. -\u003e Not needed. Adjustments to the standard website deployment, create a client good enough for testing.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create very simple initial HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [x] Register renderer to all tables via Dem aspects and object paths.\n   * [x] Make it easy to activate this aspect via Dem config.\n   * [ ] Add project files in `src/main/html` to path context and make thereby the fullscreen version of renderer discoverable on the website.\n   * [x] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.  -\u003e This is not needed for now.\n      * [x] Document this in general Java project guidelines.  -\u003e This is not needed for now.\n   * [x] Fix layout issue. Otherwise it is hard to find the correct paths via GUI: https://todo.sr.ht/~splitcells-net/net.splitcells.network/108\n   * [ ] Create dynamic 3D world viewer (currently only Git repo worlds are rendered).\n  * [ ] Make game usable on Steam Deck.\n     * [ ] Integrate controller via Web Gamepad API, which makes should make it possible to move the camera through the world.\n     * [ ] Make it possible to switch between views of 3D world, tables and constraints.\n     * [ ] Make game easily installable on Steam Deck via Flatpak: #195\n  * [ ] Clean up GUI and make it usable and somewhat nice.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] Create timeSteps rater.\n         * [x] Make timeSteps without overlapping groups, because this is not supported. Instead, one can use the instances of timeSteps raters, where one represents start times with even values and one represents start times with odd values. This makes the initial implementation easier, because Gel does not support raters with overlapping groups yet.\n         * [ ] Test time step group content and not just number of groups.\n         * [ ] Test with random allocations.\n         * [x] Check why linear initialization has non-linear supply and demand selection.\n         * [x] During addition and removal, rating events should be calculated by the rater.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Implement game of life with 2 players.\n* [ ] Implement game of life with 2 players, where each player has choices and wants to maximize its liveness.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reasoning for name.\n* [ ] Run private server with public world result state.\n# Ideas For Future Tickets\n* [ ] Create constraint renderer.\n* [ ] Create constraint editor.\n* [ ] Create table editor.\n* [ ] Create automatic game instance reporter for local execution and social media advertisement.\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).\n* [ ] Make this a blockchain game and thereby trigger people.\n* [ ] Run public server.\n* [ ] Create a world presenter.\n   * [ ] https://www.theatrejs.com/\n* [ ] Visualize optimization and table network overview.","files":null},{"type":6,"author":{"id":"8f18fdff7c4147cfc375cbcf472669a986e9d714"},"timestamp":1670888821,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjinLK8"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"This is currently the main new feature.\n\n# Context\nThe initial idea for the optimization framework long ago was\nto create a modeller for complex optimization systems.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames are inherently the same,\nbut cover a wider field (not just economics) is better advertizable.\n\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests by combining test problems and thereby creating bigger and more complex problems and test data.\n* [x] Create a very simple renderer for it.\n* [x] Provide unsecured local website for testing. -\u003e Not needed. Adjustments to the standard website deployment, create a client good enough for testing.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create very simple initial HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [x] Register renderer to all tables via Dem aspects and object paths.\n   * [x] Make it easy to activate this aspect via Dem config.\n   * [ ] Add project files in `src/main/html` to path context and make thereby the fullscreen version of renderer discoverable on the website.\n   * [x] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.  -\u003e This is not needed for now.\n      * [x] Document this in general Java project guidelines.  -\u003e This is not needed for now.\n   * [x] Fix layout issue. Otherwise it is hard to find the correct paths via GUI: https://todo.sr.ht/~splitcells-net/net.splitcells.network/108\n   * [ ] Create dynamic 3D world viewer (currently only Git repo worlds are rendered).\n  * [ ] Make game usable on Steam Deck.\n     * [ ] Integrate controller via Web Gamepad API, which makes should make it possible to move the camera through the world.\n     * [ ] Make it possible to switch between views of 3D world, tables and constraints.\n     * [ ] Make game easily installable on Steam Deck via Flatpak: #195\n  * [ ] Clean up GUI and make it usable and somewhat nice.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] Create timeSteps rater.\n         * [x] Make timeSteps without overlapping groups, because this is not supported. Instead, one can use the instances of timeSteps raters, where one represents start times with even values and one represents start times with odd values. This makes the initial implementation easier, because Gel does not support raters with overlapping groups yet.\n         * [x] Test time step group content and not just number of groups.\n         * [ ] Test with random allocations.\n         * [x] Check why linear initialization has non-linear supply and demand selection.\n         * [x] During addition and removal, rating events should be calculated by the rater.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Implement game of life with 2 players.\n* [ ] Implement game of life with 2 players, where each player has choices and wants to maximize its liveness.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reasoning for name.\n* [ ] Run private server with public world result state.\n# Ideas For Future Tickets\n* [ ] Create constraint renderer.\n* [ ] Create constraint editor.\n* [ ] Create table editor.\n* [ ] Create automatic game instance reporter for local execution and social media advertisement.\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).\n* [ ] Make this a blockchain game and thereby trigger people.\n* [ ] Run public server.\n* [ ] Create a world presenter.\n   * [ ] https://www.theatrejs.com/\n* [ ] Visualize optimization and table network overview.","files":null},{"type":6,"author":{"id":"8f18fdff7c4147cfc375cbcf472669a986e9d714"},"timestamp":1670888845,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjinLbc"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"This is currently the main new feature.\n\n# Context\nThe initial idea for the optimization framework long ago was\nto create a modeller for complex optimization systems.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames are inherently the same,\nbut cover a wider field (not just economics) is better advertizable.\n\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests by combining test problems and thereby creating bigger and more complex problems and test data.\n* [x] Create a very simple renderer for it.\n* [x] Provide unsecured local website for testing. -\u003e Not needed. Adjustments to the standard website deployment, create a client good enough for testing.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create very simple initial HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [x] Register renderer to all tables via Dem aspects and object paths.\n   * [x] Make it easy to activate this aspect via Dem config.\n   * [ ] Add project files in `src/main/html` to path context and make thereby the fullscreen version of renderer discoverable on the website.\n   * [x] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.  -\u003e This is not needed for now.\n      * [x] Document this in general Java project guidelines.  -\u003e This is not needed for now.\n   * [x] Fix layout issue. Otherwise it is hard to find the correct paths via GUI: https://todo.sr.ht/~splitcells-net/net.splitcells.network/108\n   * [ ] Create dynamic 3D world viewer (currently only Git repo worlds are rendered).\n  * [ ] Make game usable on Steam Deck.\n     * [ ] Integrate controller via Web Gamepad API, which makes should make it possible to move the camera through the world.\n     * [ ] Make it possible to switch between views of 3D world, tables and constraints.\n     * [ ] Make game easily installable on Steam Deck via Flatpak: #195\n  * [ ] Clean up GUI and make it usable and somewhat nice.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [ ] Create timeSteps rater.\n         * [x] Make timeSteps without overlapping groups, because this is not supported. Instead, one can use the instances of timeSteps raters, where one represents start times with even values and one represents start times with odd values. This makes the initial implementation easier, because Gel does not support raters with overlapping groups yet.\n         * [x] Test time step group content and not just number of groups.\n         * [x] Test with random allocations. -\u003e Not needed for now, I hope.\n         * [x] Check why linear initialization has non-linear supply and demand selection.\n         * [x] During addition and removal, rating events should be calculated by the rater.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Implement game of life with 2 players.\n* [ ] Implement game of life with 2 players, where each player has choices and wants to maximize its liveness.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reasoning for name.\n* [ ] Run private server with public world result state.\n# Ideas For Future Tickets\n* [ ] Create constraint renderer.\n* [ ] Create constraint editor.\n* [ ] Create table editor.\n* [ ] Create automatic game instance reporter for local execution and social media advertisement.\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).\n* [ ] Make this a blockchain game and thereby trigger people.\n* [ ] Run public server.\n* [ ] Create a world presenter.\n   * [ ] https://www.theatrejs.com/\n* [ ] Visualize optimization and table network overview.","files":null},{"type":6,"author":{"id":"8f18fdff7c4147cfc375cbcf472669a986e9d714"},"timestamp":1670888851,"metadata":{"github-id":"UCE_lAHOFCNQW85Ev3x4zjinLfI"},"target":"31d8dd376514afd9ddce7ec5a653df59e9ba13a4cb55d613f64d1f3cdecc1cd7","message":"This is currently the main new feature.\n\n# Context\nThe initial idea for the optimization framework long ago was\nto create a modeller for complex optimization systems.\n\nThe first idea was to model economic systems,\nto execute such systems given financial data\nand to test theories based on such executions.\nThat's where the first name `State Network Execution, Analyzis and Optimization` comes from.\nLater it was renamed to `State Network Optimization`.\n\nGames are inherently the same,\nbut cover a wider field (not just economics) is better advertizable.\n\n# Goals\n* [ ] Document goals of this game.\n   * [ ] Gamification\n   * [ ] Alternative or counterpart to test recursion: create meaning full tests by combining test problems and thereby creating bigger and more complex problems and test data.\n* [x] Create a very simple renderer for it.\n* [x] Provide unsecured local website for testing. -\u003e Not needed. Adjustments to the standard website deployment, create a client good enough for testing.\n* [ ] Create GUI for web server, where one can access and interact with all tables.\n   * [x] Create very simple initial HTML renderer for table.\n   * [x] Create complete page renderer for table.\n   * [x] Add `objectsRenderer` with an example to website in order to ensure it works.\n      * [x] Adjust base path to `net/splitcells/cin/instance/testing/`.\n   * [x] Register renderer to all tables via Dem aspects and object paths.\n   * [x] Make it easy to activate this aspect via Dem config.\n   * [ ] Add project files in `src/main/html` to path context and make thereby the fullscreen version of renderer discoverable on the website.\n   * [x] Provide config for the web server project, where every feature is enabled. This general workflow/app thing would be good in the future for all projects. This could be done via workflow or app classes like the class Dem.  -\u003e This is not needed for now.\n      * [x] Document this in general Java project guidelines.  -\u003e This is not needed for now.\n   * [x] Fix layout issue. Otherwise it is hard to find the correct paths via GUI: https://todo.sr.ht/~splitcells-net/net.splitcells.network/108\n   * [ ] Create dynamic 3D world viewer (currently only Git repo worlds are rendered).\n  * [ ] Make game usable on Steam Deck.\n     * [ ] Integrate controller via Web Gamepad API, which makes should make it possible to move the camera through the world.\n     * [ ] Make it possible to switch between views of 3D world, tables and constraints.\n     * [ ] Make game easily installable on Steam Deck via Flatpak: #195\n  * [ ] Clean up GUI and make it usable and somewhat nice.\n* [ ] Implement game of life.\n   * [ ] Run game.\n   * [x] Visualize state.\n   * [ ] Make it easy to move camera anywhere in state visualization, in order to traverse big worlds.\n   * [ ] Implement constraints.\n      * [x] Support multiple outgoing groups for one line of incoming group in constraint node.\n      * [x] Create timeSteps rater.\n         * [x] Make timeSteps without overlapping groups, because this is not supported. Instead, one can use the instances of timeSteps raters, where one represents start times with even values and one represents start times with odd values. This makes the initial implementation easier, because Gel does not support raters with overlapping groups yet.\n         * [x] Test time step group content and not just number of groups.\n         * [x] Test with random allocations. -\u003e Not needed for now, I hope.\n         * [x] Check why linear initialization has non-linear supply and demand selection.\n         * [x] During addition and removal, rating events should be calculated by the rater.\n      * [ ] positionCluster\n      * [ ] isAlive\n      * [ ] oneliness\n      * [ ] dies\n      * [ ] survives\n      * [ ] goodCompany\n      * [ ] crowded\n      * [ ] isDead\n      * [ ] reviavlCondition\n      * [ ] becomesAlive\n      * [ ] unchanged\n   * [ ] Check constraints via tests.\n   * [ ] Check constraints via test run.\n   * [ ] Load state from cin log repo.\n   * [ ] Save state to cin log repo.\n* [ ] Implement game of life with 2 players.\n* [ ] Implement game of life with 2 players, where each player has choices and wants to maximize its liveness.\n* [x] Find a name: crisis network = cin\n   * [ ] Document reasoning for name.\n* [ ] Run private server with public world result state.\n# Ideas For Future Tickets\n* [ ] Create constraint renderer.\n* [ ] Create constraint editor.\n* [ ] Create table editor.\n* [ ] Create automatic game instance reporter for local execution and social media advertisement.\n* [ ] Large moving entities with large and diverse capabilities and with supply chain requirements (i.e. something like vehicles, aircraft or aircraft carrier).\n* [ ] Make this a blockchain game and thereby trigger people.\n* [ ] Run public server.\n* [ ] Create a world presenter.\n   * [ ] https://www.theatrejs.com/\n* [ ] Visualize optimization and table network overview.","files":null}]}