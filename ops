{"version":1,"ops":[{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1663964962,"metadata":{"github-id":"UCE_lAHOFCNQW85Ll3KLzjRnMFI"},"target":"f9d714cf3f43654cb74a81122effb80aaa9341696b7e2ca0722db79dace3cabe","message":"The performance of `History#resetTo` is horrible.\nThis was found out via `SupplySelector#hillClimber` during the implementation of the school course scheduling.\n\n* [ ] Create `HistoryTest#test_reset_to_beginning_runtime` and tag as `TestTypes.BENCHMARK_RUNTIME`.\n* [ ] Execute `TestTypes.BENCHMARK_RUNTIME` not during default build.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1663964972,"metadata":{"github-id":"UCE_lAHOFCNQW85Ll3KLzjRnMN4"},"target":"f9d714cf3f43654cb74a81122effb80aaa9341696b7e2ca0722db79dace3cabe","message":"The performance of `History#resetTo` is horrible.\nThis was found out via `SupplySelector#hillClimber` during the implementation of the school course scheduling.\n\n* [ ] Create `HistoryTest#test_reset_to_beginning_runtime` and tag as `TestTypes.BENCHMARK_RUNTIME`.\n* [ ] Don't execute `TestTypes.BENCHMARK_RUNTIME` during default build.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1663964994,"metadata":{"github-id":"UCE_lAHOFCNQW85Ll3KLzjRnMcs"},"target":"f9d714cf3f43654cb74a81122effb80aaa9341696b7e2ca0722db79dace3cabe","message":"The performance of `History#resetTo` is horrible.\nThis was found out via `SupplySelector#hillClimber` during the implementation of the school course scheduling.\n\n* [ ] Create `HistoryTest#test_reset_to_beginning_runtime` and tag as `TestTypes.BENCHMARK_RUNTIME`.\n* [ ] Don't execute `TestTypes.BENCHMARK_RUNTIME` during default build.\n* [ ] Look at runtime logged at network log.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1665329386,"metadata":{"github-id":"UCE_lAHOFCNQW85Ll3KLzjUtdPg"},"target":"f9d714cf3f43654cb74a81122effb80aaa9341696b7e2ca0722db79dace3cabe","message":"The performance of `History#resetTo` is horrible.\nThis was found out via `SupplySelector#hillClimber` during the implementation of the school course scheduling.\n\n* [ ] Create `HistoryTest#test_reset_to_beginning_runtime` and tag as `TestTypes.BENCHMARK_RUNTIME`.\n* [ ] Don't execute `TestTypes.BENCHMARK_RUNTIME` during default build.\n* [ ] How to execute `TestTypes.BENCHMARK_RUNTIME`?\n* [ ] Look at runtime logged at network log.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1665329545,"metadata":{"github-id":"UCE_lAHOFCNQW85Ll3KLzjUtdrM"},"target":"f9d714cf3f43654cb74a81122effb80aaa9341696b7e2ca0722db79dace3cabe","message":"The performance of `History#resetTo` is horrible.\nThis was found out via `SupplySelector#hillClimber` during the implementation of the school course scheduling.\n\n* [x] Create `HistoryTest#test_reset_to_beginning_runtime` and tag as `TestTypes.BENCHMARK_RUNTIME`.\n* [ ] Don't execute `TestTypes.BENCHMARK_RUNTIME` during default build.\n* [ ] How to execute `TestTypes.BENCHMARK_RUNTIME`?\n* [ ] Look at runtime logged at network log.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1665329588,"metadata":{"github-id":"UCE_lAHOFCNQW85Ll3KLzjUtdzw"},"target":"f9d714cf3f43654cb74a81122effb80aaa9341696b7e2ca0722db79dace3cabe","message":"The performance of `History#resetTo` is horrible.\nThis was found out via `SupplySelector#hillClimber` during the implementation of the school course scheduling.\n\n* [x] Create `HistoryTest#test_reset_to_beginning_runtime` and tag as `TestTypes.BENCHMARK_RUNTIME`. -\u003e 1.000 allocations can be reset in about 1-2 seconds, whereas 10.000 are reset in about 45 seconds.\n* [ ] Don't execute `TestTypes.BENCHMARK_RUNTIME` during default build.\n* [ ] How to execute `TestTypes.BENCHMARK_RUNTIME`?\n* [ ] Look at runtime logged at network log.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1665329613,"metadata":{"github-id":"UCE_lAHOFCNQW85Ll3KLzjUtd34"},"target":"f9d714cf3f43654cb74a81122effb80aaa9341696b7e2ca0722db79dace3cabe","message":"The performance of `History#resetTo` is horrible.\nThis was found out via `SupplySelector#hillClimber` during the implementation of the school course scheduling.\n\n* [x] Create `HistoryTest#test_reset_to_beginning_runtime` and tag as `TestTypes.BENCHMARK_RUNTIME`. -\u003e 1.000 allocations can be reset in about 1-2 seconds, whereas 10.000 are reset in about 45 seconds.\n* [ ] Don't execute `TestTypes.BENCHMARK_RUNTIME` during default build.\n* [ ] How to execute `TestTypes.BENCHMARK_RUNTIME`?\n* [ ] Look at runtime logged at network log.\n* [ ] Fix scaling issue found via test_reset_to_beginning_runtime.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1665960664,"metadata":{"github-id":"UCE_lAHOFCNQW85Ll3KLzjWKRfw"},"target":"f9d714cf3f43654cb74a81122effb80aaa9341696b7e2ca0722db79dace3cabe","message":"The performance of `History#resetTo` is horrible.\nThis was found out via `SupplySelector#hillClimber` during the implementation of the school course scheduling.\n\n* [x] Create `HistoryTest#test_reset_to_beginning_runtime` and tag as `TestTypes.BENCHMARK_RUNTIME`. -\u003e 1.000 allocations can be reset in about 1-2 seconds, whereas 10.000 are reset in about 45 seconds.\n* [x] Don't execute `TestTypes.BENCHMARK_RUNTIME` during default build.\n* [ ] How to execute `TestTypes.BENCHMARK_RUNTIME`?\n* [ ] Look at runtime logged at network log.\n* [ ] Fix scaling issue found via test_reset_to_beginning_runtime.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1665960881,"metadata":{"github-id":"UCE_lAHOFCNQW85Ll3KLzjWKSWk"},"target":"f9d714cf3f43654cb74a81122effb80aaa9341696b7e2ca0722db79dace3cabe","message":"The performance of `History#resetTo` is horrible.\nThis was found out via `SupplySelector#hillClimber` during the implementation of the school course scheduling.\n\n* [x] Create `HistoryTest#test_reset_to_beginning_runtime` and tag as `TestTypes.BENCHMARK_RUNTIME`. -\u003e 1.000 allocations can be reset in about 1-2 seconds, whereas 10.000 are reset in about 45 seconds.\n* [x] Don't execute `TestTypes.BENCHMARK_RUNTIME` during default build.\n* [x] How to execute `TestTypes.BENCHMARK_RUNTIME`?  -\u003e via profiles and groups settings.\n* [ ] Create test execution commands.\n* [ ] Look at runtime logged at network log.\n* [ ] Fix scaling issue found via test_reset_to_beginning_runtime.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1666375831,"metadata":{"github-id":"UCE_lAHOFCNQW85Ll3KLzjXfsy4"},"target":"f9d714cf3f43654cb74a81122effb80aaa9341696b7e2ca0722db79dace3cabe","message":"The performance of `History#resetTo` is horrible.\nThis was found out via `SupplySelector#hillClimber` during the implementation of the school course scheduling.\n\n* [x] Create `HistoryTest#test_reset_to_beginning_runtime` and tag as `TestTypes.BENCHMARK_RUNTIME`. -\u003e 1.000 allocations can be reset in about 1-2 seconds, whereas 10.000 are reset in about 45 seconds.\n* [x] Don't execute `TestTypes.BENCHMARK_RUNTIME` during default build.\n* [x] How to execute `TestTypes.BENCHMARK_RUNTIME`?  -\u003e via profiles and groups settings.\n* [x] Create test execution commands.\n* [ ] Look at runtime logged at network log.\n* [ ] Fix scaling issue found via test_reset_to_beginning_runtime.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1667140873,"metadata":{"github-id":"UCE_lAHOFCNQW85Ll3KLzjZPi9Q"},"target":"f9d714cf3f43654cb74a81122effb80aaa9341696b7e2ca0722db79dace3cabe","message":"The performance of `History#resetTo` is horrible.\nThis was found out via `SupplySelector#hillClimber` during the implementation of the school course scheduling.\n\n* [x] Create `HistoryTest#test_reset_to_beginning_runtime` and tag as `TestTypes.BENCHMARK_RUNTIME`. -\u003e 1.000 allocations can be reset in about 1-2 seconds, whereas 10.000 are reset in about 45 seconds.\n* [x] Don't execute `TestTypes.BENCHMARK_RUNTIME` during default build.\n* [x] How to execute `TestTypes.BENCHMARK_RUNTIME`?  -\u003e via profiles and groups settings.\n* [x] Create test execution commands.\n* [ ] Look at runtime logged at network log.\n* [ ] Fix scaling issue found via test_reset_to_beginning_runtime.\n   * [ ] Create cache list for `LookupTable#content` in order to speed up `LookupTable#line`.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1668801436,"metadata":{"github-id":"UCE_lAHOFCNQW85Ll3KLzjdpseM"},"target":"f9d714cf3f43654cb74a81122effb80aaa9341696b7e2ca0722db79dace3cabe","message":"The performance of `History#resetTo` is horrible.\nThis was found out via `SupplySelector#hillClimber` during the implementation of the school course scheduling.\n\n* [x] Create `HistoryTest#test_reset_to_beginning_runtime` and tag as `TestTypes.BENCHMARK_RUNTIME`. -\u003e 1.000 allocations can be reset in about 1-2 seconds, whereas 10.000 are reset in about 45 seconds.\n* [x] Don't execute `TestTypes.BENCHMARK_RUNTIME` during default build.\n* [x] How to execute `TestTypes.BENCHMARK_RUNTIME`?  -\u003e via profiles and groups settings.\n* [x] Create test execution commands.\n* [ ] Look at runtime logged at network log.\n* [ ] Fix scaling issue found via test_reset_to_beginning_runtime.\n   * [ ] Create cache list for `LookupTable#content` in order to speed up `LookupTable#line`.\n* [ ] Implement cache for lines (not rawLines) in LookupTable.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1668801791,"metadata":{"github-id":"UCE_lAHOFCNQW85Ll3KLzjdpwrY"},"target":"f9d714cf3f43654cb74a81122effb80aaa9341696b7e2ca0722db79dace3cabe","message":"The performance of `History#resetTo` is horrible.\nThis was found out via `SupplySelector#hillClimber` during the implementation of the school course scheduling.\n\n* [x] Create `HistoryTest#test_reset_to_beginning_runtime` and tag as `TestTypes.BENCHMARK_RUNTIME`. -\u003e 1.000 allocations can be reset in about 1-2 seconds, whereas 10.000 are reset in about 45 seconds.\n* [x] Don't execute `TestTypes.BENCHMARK_RUNTIME` during default build.\n* [x] How to execute `TestTypes.BENCHMARK_RUNTIME`?  -\u003e via profiles and groups settings.\n* [x] Create test execution commands.\n* [ ] Look at runtime logged at network log.\n* [ ] Fix scaling issue found via test_reset_to_beginning_runtime.\n   * [ ] Create cache list for `LookupTable#content` in order to speed up `LookupTable#line`.\n* [ ] Implement cache for lines (not rawLines) in LookupTable, so that `LookupTable#line` is reasonably fast.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1668802013,"metadata":{"github-id":"UCE_lAHOFCNQW85Ll3KLzjdpzc4"},"target":"f9d714cf3f43654cb74a81122effb80aaa9341696b7e2ca0722db79dace3cabe","message":"The performance of `History#resetTo` is horrible.\nThis was found out via `SupplySelector#hillClimber` during the implementation of the school course scheduling.\n\n* [x] Create `HistoryTest#test_reset_to_beginning_runtime` and tag as `TestTypes.BENCHMARK_RUNTIME`. -\u003e 1.000 allocations can be reset in about 1-2 seconds, whereas 10.000 are reset in about 45 seconds.\n* [x] Don't execute `TestTypes.BENCHMARK_RUNTIME` during default build.\n* [x] How to execute `TestTypes.BENCHMARK_RUNTIME`?  -\u003e via profiles and groups settings.\n* [x] Create test execution commands.\n* [ ] Look at runtime logged at network log.\n* [ ] Fix scaling issue found via test_reset_to_beginning_runtime.\n   * [ ] Implement cache for lines (not rawLines) in LookupTable, so that `LookupTable#line` is reasonably fast.","files":null},{"type":6,"author":{"id":"8f18fdff7c4147cfc375cbcf472669a986e9d714"},"timestamp":1669548718,"metadata":{"github-id":"UCE_lAHOFCNQW85Ll3KLzjfM_PI"},"target":"f9d714cf3f43654cb74a81122effb80aaa9341696b7e2ca0722db79dace3cabe","message":"The performance of `History#resetTo` is horrible.\nThis was found out via `SupplySelector#hillClimber` during the implementation of the school course scheduling.\n\n* [x] Create `HistoryTest#test_reset_to_beginning_runtime` and tag as `TestTypes.BENCHMARK_RUNTIME`. -\u003e 1.000 allocations can be reset in about 1-2 seconds, whereas 10.000 are reset in about 45 seconds.\n* [x] Don't execute `TestTypes.BENCHMARK_RUNTIME` during default build.\n* [x] How to execute `TestTypes.BENCHMARK_RUNTIME`?  -\u003e via profiles and groups settings.\n* [x] Create test execution commands.\n* [ ] Look at runtime logged at network log. -\u003e Not relevant for now.\n* [ ] Fix scaling issue found via test_reset_to_beginning_runtime.\n   * [ ] Implement cache for lines (not rawLines) in LookupTable, so that `LookupTable#line` is reasonably fast.","files":null},{"type":6,"author":{"id":"8f18fdff7c4147cfc375cbcf472669a986e9d714"},"timestamp":1669548721,"metadata":{"github-id":"UCE_lAHOFCNQW85Ll3KLzjfM_Pg"},"target":"f9d714cf3f43654cb74a81122effb80aaa9341696b7e2ca0722db79dace3cabe","message":"The performance of `History#resetTo` is horrible.\nThis was found out via `SupplySelector#hillClimber` during the implementation of the school course scheduling.\n\n* [x] Create `HistoryTest#test_reset_to_beginning_runtime` and tag as `TestTypes.BENCHMARK_RUNTIME`. -\u003e 1.000 allocations can be reset in about 1-2 seconds, whereas 10.000 are reset in about 45 seconds.\n* [x] Don't execute `TestTypes.BENCHMARK_RUNTIME` during default build.\n* [x] How to execute `TestTypes.BENCHMARK_RUNTIME`?  -\u003e via profiles and groups settings.\n* [x] Create test execution commands.\n* [x] Look at runtime logged at network log. -\u003e Not relevant for now.\n* [ ] Fix scaling issue found via test_reset_to_beginning_runtime.\n   * [ ] Implement cache for lines (not rawLines) in LookupTable, so that `LookupTable#line` is reasonably fast.","files":null},{"type":6,"author":{"id":"8f18fdff7c4147cfc375cbcf472669a986e9d714"},"timestamp":1669551109,"metadata":{"github-id":"UCE_lAHOFCNQW85Ll3KLzjfNGbk"},"target":"f9d714cf3f43654cb74a81122effb80aaa9341696b7e2ca0722db79dace3cabe","message":"The performance of `History#resetTo` is horrible.\nThis was found out via `SupplySelector#hillClimber` during the implementation of the school course scheduling.\n\n* [x] Create `HistoryTest#test_reset_to_beginning_runtime` and tag as `TestTypes.BENCHMARK_RUNTIME`. -\u003e 1.000 allocations can be reset in about 1-2 seconds, whereas 10.000 are reset in about 45 seconds.\n* [x] Don't execute `TestTypes.BENCHMARK_RUNTIME` during default build.\n* [x] How to execute `TestTypes.BENCHMARK_RUNTIME`?  -\u003e via profiles and groups settings.\n* [x] Create test execution commands.\n* [x] Look at runtime logged at network log. -\u003e Not relevant for now.\n* [ ] Fix scaling issue found via test_reset_to_beginning_runtime.\n   * Test via `mvn clean install -DexcludedGroups=\"experimental_test\" -Dtest.group=benchmarking_runtime`.\n   * [ ] Implement cache for lines (not rawLines) in LookupTable, so that `LookupTable#line` is reasonably fast.","files":null},{"type":6,"author":{"id":"8f18fdff7c4147cfc375cbcf472669a986e9d714"},"timestamp":1670025946,"metadata":{"github-id":"UCE_lAHOFCNQW85Ll3KLzjgn7Bo"},"target":"f9d714cf3f43654cb74a81122effb80aaa9341696b7e2ca0722db79dace3cabe","message":"The performance of `History#resetTo` is horrible.\nThis was found out via `SupplySelector#hillClimber` during the implementation of the school course scheduling.\n\n* [x] Create `HistoryTest#test_reset_to_beginning_runtime` and tag as `TestTypes.BENCHMARK_RUNTIME`. -\u003e 1.000 allocations can be reset in about 1-2 seconds, whereas 10.000 are reset in about 45 seconds.\n* [x] Don't execute `TestTypes.BENCHMARK_RUNTIME` during default build.\n* [x] How to execute `TestTypes.BENCHMARK_RUNTIME`?  -\u003e via profiles and groups settings.\n* [x] Create test execution commands.\n* [x] Look at runtime logged at network log. -\u003e Not relevant for now.\n* [ ] Fix scaling issue found via test_reset_to_beginning_runtime.\n   * Test via `mvn clean install -DexcludedGroups=\"experimental_test\" -Dtest.group=benchmarking_runtime`.\n   * [x] Implement cache for lines (not rawLines) in LookupTable, so that `LookupTable#line` is reasonably fast.","files":null},{"type":6,"author":{"id":"8f18fdff7c4147cfc375cbcf472669a986e9d714"},"timestamp":1670026075,"metadata":{"github-id":"UCE_lAHOFCNQW85Ll3KLzjgn8Ec"},"target":"f9d714cf3f43654cb74a81122effb80aaa9341696b7e2ca0722db79dace3cabe","message":"The performance of `History#resetTo` is horrible.\nThis was found out via `SupplySelector#hillClimber` during the implementation of the school course scheduling.\n\n* [x] Create `HistoryTest#test_reset_to_beginning_runtime` and tag as `TestTypes.BENCHMARK_RUNTIME`. -\u003e 1.000 allocations can be reset in about 1-2 seconds, whereas 10.000 are reset in about 45 seconds.\n* [x] Don't execute `TestTypes.BENCHMARK_RUNTIME` during default build.\n* [x] How to execute `TestTypes.BENCHMARK_RUNTIME`?  -\u003e via profiles and groups settings.\n* [x] Create test execution commands.\n* [x] Look at runtime logged at network log. -\u003e Not relevant for now.\n* [ ] Fix scaling issue found via test_reset_to_beginning_runtime.\n   * Test via `mvn clean install -DexcludedGroups=\"experimental_test\" -Dtest.group=benchmarking_runtime`.\n   * [ ] Implement cache for lines (not rawLines) in LookupTable, so that `LookupTable#line` is reasonably fast.","files":null},{"type":6,"author":{"id":"8f18fdff7c4147cfc375cbcf472669a986e9d714"},"timestamp":1670026139,"metadata":{"github-id":"UCE_lAHOFCNQW85Ll3KLzjgn8f8"},"target":"f9d714cf3f43654cb74a81122effb80aaa9341696b7e2ca0722db79dace3cabe","message":"The performance of `History#resetTo` is horrible.\nThis was found out via `SupplySelector#hillClimber` during the implementation of the school course scheduling.\n\n* [x] Create `HistoryTest#test_reset_to_beginning_runtime` and tag as `TestTypes.BENCHMARK_RUNTIME`. -\u003e 1.000 allocations can be reset in about 1-2 seconds, whereas 10.000 are reset in about 45 seconds.\n* [x] Don't execute `TestTypes.BENCHMARK_RUNTIME` during default build.\n* [x] How to execute `TestTypes.BENCHMARK_RUNTIME`?  -\u003e via profiles and groups settings.\n* [x] Create test execution commands.\n* [x] Look at runtime logged at network log. -\u003e Not relevant for now.\n* [ ] Fix scaling issue found via test_reset_to_beginning_runtime.\n   * Test via `mvn clean install -DexcludedGroups=\"experimental_test\" -Dtest.group=benchmarking_runtime`.\n   * [ ] Implement cache for lines (not rawLines) in LookupTable, so that `LookupTable#line` is reasonably fast.\n   * [ ] Recheck via profiler, if missing rawLines cache really causes the issue.","files":null},{"type":6,"author":{"id":"8f18fdff7c4147cfc375cbcf472669a986e9d714"},"timestamp":1670053644,"metadata":{"github-id":"UCE_lAHOFCNQW85Ll3KLzjgprCU"},"target":"f9d714cf3f43654cb74a81122effb80aaa9341696b7e2ca0722db79dace3cabe","message":"The performance of `History#resetTo` is horrible.\nThis was found out via `SupplySelector#hillClimber` during the implementation of the school course scheduling.\n\n* [x] Create `HistoryTest#test_reset_to_beginning_runtime` and tag as `TestTypes.BENCHMARK_RUNTIME`. -\u003e 1.000 allocations can be reset in about 1-2 seconds, whereas 10.000 are reset in about 45 seconds.\n* [x] Don't execute `TestTypes.BENCHMARK_RUNTIME` during default build.\n* [x] How to execute `TestTypes.BENCHMARK_RUNTIME`?  -\u003e via profiles and groups settings.\n* [x] Create test execution commands.\n* [x] Look at runtime logged at network log. -\u003e Not relevant for now.\n* [ ] Fix scaling issue found via test_reset_to_beginning_runtime.\n   * Test via `mvn clean install -DexcludedGroups=\"experimental_test\" -Dtest.group=benchmarking_runtime`.\n   * [x] Implement cache for lines (not rawLines) in LookupTable, so that `LookupTable#line` is reasonably fast. -\u003e Is already implemented and present in a strange way.\n   * [x] Recheck via profiler, if missing rawLines cache really causes the issue. -\u003e Cause for runtime was dominated by natural argumentation inside history.","files":null},{"type":6,"author":{"id":"8f18fdff7c4147cfc375cbcf472669a986e9d714"},"timestamp":1670054189,"metadata":{"github-id":"UCE_lAHOFCNQW85Ll3KLzjgpsmY"},"target":"f9d714cf3f43654cb74a81122effb80aaa9341696b7e2ca0722db79dace3cabe","message":"The performance of `History#resetTo` is horrible.\nThis was found out via `SupplySelector#hillClimber` during the implementation of the school course scheduling.\n\n* [x] Create `HistoryTest#test_reset_to_beginning_runtime` and tag as `TestTypes.BENCHMARK_RUNTIME`. -\u003e 1.000 allocations can be reset in about 1-2 seconds, whereas 10.000 are reset in about 45 seconds.\n* [x] Don't execute `TestTypes.BENCHMARK_RUNTIME` during default build.\n* [x] How to execute `TestTypes.BENCHMARK_RUNTIME`?  -\u003e via profiles and groups settings.\n* [x] Create test execution commands.\n* [x] Look at runtime logged at network log. -\u003e Not relevant for now.\n* [ ] Fix scaling issue found via test_reset_to_beginning_runtime.\n   * Test via `mvn clean install -DexcludedGroups=\"experimental_test\" -Dtest.group=benchmarking_runtime`.\n   * [x] Implement cache for lines (not rawLines) in LookupTable, so that `LookupTable#line` is reasonably fast. -\u003e Is already implemented and present in a strange way.\n   * [x] Recheck via profiler, if missing rawLines cache really causes the issue. -\u003e Cause for runtime was dominated by natural argumentation inside history.\n   * [ ] Make incremental rating calculations, in the sense, that the group's rating is stored in the constraint node and then updated via differences as opposed to new rating values. This should improve performance, if there is a big incoming constraint group.","files":null}]}