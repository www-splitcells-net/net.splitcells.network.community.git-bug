{"version":1,"ops":[{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1662235759,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjNgBLU"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [ ] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [ ] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [ ] Laptop\n   * [ ] Desktop\n* [ ] Create command to execute list of host.\n   * [ ] Do not deploy build if target host not available and create simple warning instead.\n   * [ ] Do not deploy build if target host is itself.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [ ] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n* [ ] Clean up private network build commands.\n* [ ] Execute tests without password query.\n* [ ] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);`\n* [ ] Execute functionality/integration tests.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1662235917,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjNgBm4"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [ ] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [ ] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [ ] Laptop\n   * [ ] Desktop\n* [ ] Create command to execute list of host.\n   * [ ] Do not deploy build if target host not available and create simple warning instead.\n   * [ ] Do not deploy build if target host is itself.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [ ] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n* [ ] Clean up private network build commands.\n* [ ] Execute tests without password query.\n* [ ] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);`\n* [ ] Execute functionality/integration tests.\n* [ ] Define OSI command to execute all network tests.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1662236142,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjNgCIk"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [ ] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [ ] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [ ] Laptop\n   * [ ] Desktop\n* [ ] Create command to execute list of host.\n   * [ ] Do not deploy build if target host not available and create simple warning instead.\n   * [ ] Do not deploy build if target host is itself.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [ ] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [ ] Clean up private network build commands.\n* [ ] Execute tests without password query.\n* [ ] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);`\n* [ ] Execute functionality/integration tests.\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1662290525,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjNiL68"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [ ] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [ ] Laptop\n   * [ ] Desktop\n* [ ] Create command to execute list of host.\n   * [ ] Do not deploy build if target host not available and create simple warning instead.\n   * [ ] Do not deploy build if target host is itself.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [ ] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [ ] Clean up private network build commands.\n* [ ] Execute tests without password query.\n* [ ] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);`\n* [ ] Execute functionality/integration tests.\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1662290527,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjNiL7k"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [ ] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [ ] Desktop\n* [ ] Create command to execute list of host.\n   * [ ] Do not deploy build if target host not available and create simple warning instead.\n   * [ ] Do not deploy build if target host is itself.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [ ] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [ ] Clean up private network build commands.\n* [ ] Execute tests without password query.\n* [ ] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);`\n* [ ] Execute functionality/integration tests.\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1662290543,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjNiL-U"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [ ] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [ ] Create command to execute list of host.\n   * [ ] Do not deploy build if target host not available and create simple warning instead.\n   * [ ] Do not deploy build if target host is itself.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [ ] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [ ] Clean up private network build commands.\n* [ ] Execute tests without password query.\n* [ ] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);`\n* [ ] Execute functionality/integration tests.\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1662290544,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjNiL-Y"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [ ] Create command to execute list of host.\n   * [ ] Do not deploy build if target host not available and create simple warning instead.\n   * [ ] Do not deploy build if target host is itself.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [ ] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [ ] Clean up private network build commands.\n* [ ] Execute tests without password query.\n* [ ] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);`\n* [ ] Execute functionality/integration tests.\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1662856927,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjO1zak"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [ ] Create command to execute list of host.\n   * [ ] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [ ] Do not deploy build if target host is itself.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [ ] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [ ] Clean up private network build commands.\n* [ ] Execute tests without password query.\n* [ ] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);`\n* [ ] Execute functionality/integration tests.\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1662856934,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjO1zbI"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [ ] Create command to execute list of host.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [ ] Do not deploy build if target host is itself.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [ ] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [ ] Clean up private network build commands.\n* [ ] Execute tests without password query.\n* [ ] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);`\n* [ ] Execute functionality/integration tests.\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1662856948,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjO1zdE"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [ ] Create command to execute list of host.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [ ] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [ ] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [ ] Clean up private network build commands.\n* [ ] Execute tests without password query.\n* [ ] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);`\n* [ ] Execute functionality/integration tests.\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1662856951,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjO1zdk"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [ ] Create command to execute list of host.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [ ] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [ ] Clean up private network build commands.\n* [ ] Execute tests without password query.\n* [ ] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);`\n* [ ] Execute functionality/integration tests.\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1662857304,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjO10HE"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [ ] Create command to execute list of host. -\u003e The command `net.splitcells.network.deploy.build` was created for that.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [ ] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [ ] Clean up private network build commands.\n* [ ] Execute tests without password query.\n* [ ] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);`\n* [ ] Execute functionality/integration tests.\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1662857306,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjO10HU"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create command to execute list of host. -\u003e The command `net.splitcells.network.deploy.build` was created for that.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [ ] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [ ] Clean up private network build commands.\n* [ ] Execute tests without password query.\n* [ ] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);`\n* [ ] Execute functionality/integration tests.\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1662857752,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjO10_A"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create command to execute list of host. -\u003e The command `net.splitcells.network.deploy.build` was created for that.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [ ] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [x] Clean up private network build commands.\n* [ ] Execute tests without password query.\n* [ ] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);`\n* [ ] Execute functionality/integration tests.\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1662857770,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjO11Ag"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create command to execute list of host. -\u003e The command `net.splitcells.network.deploy.build` was created for that.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [ ] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [x] Clean up private network build commands.\n* [ ] Execute tests without password query. -\u003e This is not relevant for now.\n* [ ] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);`\n* [ ] Execute functionality/integration tests.\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1662857775,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjO11A4"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create command to execute list of host. -\u003e The command `net.splitcells.network.deploy.build` was created for that.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [ ] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [x] Clean up private network build commands.\n* [x] Execute tests without password query. -\u003e This is not relevant for now.\n* [ ] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);`\n* [ ] Execute functionality/integration tests.\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1662857780,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjO11Bg"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create command to execute list of host. -\u003e The command `net.splitcells.network.deploy.build` was created for that.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [ ] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [x] Clean up private network build commands.\n* [x] Execute tests without password query. -\u003e This is not relevant for now.\n* [x] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);`\n* [ ] Execute functionality/integration tests.\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1662857805,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjO11Dk"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create command to execute list of host. -\u003e The command `net.splitcells.network.deploy.build` was created for that.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [ ] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [x] Clean up private network build commands.\n* [x] Execute tests without password query. -\u003e This is not relevant for now.\n* [x] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);` -\u003e  A hack is currently used.\n* [ ] Execute functionality/integration tests.\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1662857807,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjO11D0"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create command to execute list of host. -\u003e The command `net.splitcells.network.deploy.build` was created for that.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [ ] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [x] Clean up private network build commands.\n* [x] Execute tests without password query. -\u003e This is not relevant for now.\n* [x] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);` -\u003e  A hack is currently used.\n* [ ] Execute functionality/integration tests.\n* [x] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1662857851,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjO11Ic"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create command to execute list of host. -\u003e The command `net.splitcells.network.deploy.build` was created for that.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [ ] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [x] Clean up private network build commands.\n* [x] Execute tests without password query. -\u003e This is not relevant for now.\n* [x] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);` -\u003e  A hack is currently used.\n* [ ] Execute functionality/integration tests.\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1662900825,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjO3rY0"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create command to execute list of host. -\u003e The command `net.splitcells.network.deploy.build` was created for that.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [ ] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [x] Clean up private network build commands.\n* [x] Execute tests without password query. -\u003e This is not relevant for now.\n* [x] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);` -\u003e  A hack is currently used.\n* [ ] Execute functionality/integration tests.\n   * [ ] test-via-mutations-via-pitest\n   * [ ] profile-performance-of-maven\n   * [ ] report\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1663356296,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjQNllc"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create command to execute list of host. -\u003e The command `net.splitcells.network.deploy.build` was created for that.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [ ] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [x] Clean up private network build commands.\n* [x] Execute tests without password query. -\u003e This is not relevant for now.\n* [x] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);` -\u003e  A hack is currently used.\n* [ ] Execute functionality/integration tests.\n   * [ ] test-via-mutations-via-pitest\n   * [ ] profile-performance-of-maven\n   * [x] report\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1663356297,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjQNlmc"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create command to execute list of host. -\u003e The command `net.splitcells.network.deploy.build` was created for that.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [ ] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [x] Clean up private network build commands.\n* [x] Execute tests without password query. -\u003e This is not relevant for now.\n* [x] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);` -\u003e  A hack is currently used.\n* [ ] Execute functionality/integration tests.\n   * [x] test-via-mutations-via-pitest\n   * [ ] profile-performance-of-maven\n   * [x] report\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1663356353,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjQNmJg"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create command to execute list of host. -\u003e The command `net.splitcells.network.deploy.build` was created for that.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [ ] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [x] Clean up private network build commands.\n* [x] Execute tests without password query. -\u003e This is not relevant for now.\n* [x] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);` -\u003e  A hack is currently used.\n* [ ] Execute functionality/integration tests.\n   * [x] test-via-mutations-via-pitest\n   * [x] profile-performance-of-maven -\u003e This Maven profile is not needed anymore.\n   * [x] report\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1663963766,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjRm-2s"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create command to execute list of host. -\u003e The command `net.splitcells.network.deploy.build` was created for that.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [ ] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [x] Clean up private network build commands.\n* [x] Execute tests without password query. -\u003e This is not relevant for now.\n* [x] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);` -\u003e  A hack is currently used.\n* [ ] Execute functionality/integration tests.\n   * [x] test-via-mutations-via-pitest\n   * [x] profile-performance-of-maven -\u003e This Maven profile is not needed anymore.\n   * [x] report\n   * [ ] Create `bin/test.everything.via.network.worker`\n      * [ ] Create general network worker starter.\n      * [ ] Create general network worker finisher.\n      * [ ] Create capabilities test and log if these were executed successfully.\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1665178279,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjUlfEc"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create command to execute list of host. -\u003e The command `net.splitcells.network.deploy.build` was created for that.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [x] Create repos. Upload via ssh mounts.\n   * [ ] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [x] Clean up private network build commands.\n* [x] Execute tests without password query. -\u003e This is not relevant for now.\n* [x] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);` -\u003e  A hack is currently used.\n* [ ] Execute functionality/integration tests.\n   * [x] test-via-mutations-via-pitest\n   * [x] profile-performance-of-maven -\u003e This Maven profile is not needed anymore.\n   * [x] report\n   * [ ] Create `bin/test.everything.via.network.worker`\n      * [ ] Create general network worker starter.\n      * [ ] Create general network worker finisher.\n      * [ ] Create capabilities test and log if these were executed successfully.\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1665178356,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjUlfxs"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create command to execute list of host. -\u003e The command `net.splitcells.network.deploy.build` was created for that.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [x] Create repos. Upload via ssh mounts.\n   * [x] Install OSSI.\n   * [ ] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [x] Clean up private network build commands.\n* [x] Execute tests without password query. -\u003e This is not relevant for now.\n* [x] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);` -\u003e  A hack is currently used.\n* [ ] Execute functionality/integration tests.\n   * [x] test-via-mutations-via-pitest\n   * [x] profile-performance-of-maven -\u003e This Maven profile is not needed anymore.\n   * [x] report\n   * [ ] Create `bin/test.everything.via.network.worker`\n      * [ ] Create general network worker starter.\n      * [ ] Create general network worker finisher.\n      * [ ] Create capabilities test and log if these were executed successfully.\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1665178358,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjUlfyk"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create command to execute list of host. -\u003e The command `net.splitcells.network.deploy.build` was created for that.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [x] Create repos. Upload via ssh mounts.\n   * [x] Install OSSI.\n   * [x] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [ ] Use `net.splitcells.network.deploy.build.at`.\n* [x] Clean up private network build commands.\n* [x] Execute tests without password query. -\u003e This is not relevant for now.\n* [x] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);` -\u003e  A hack is currently used.\n* [ ] Execute functionality/integration tests.\n   * [x] test-via-mutations-via-pitest\n   * [x] profile-performance-of-maven -\u003e This Maven profile is not needed anymore.\n   * [x] report\n   * [ ] Create `bin/test.everything.via.network.worker`\n      * [ ] Create general network worker starter.\n      * [ ] Create general network worker finisher.\n      * [ ] Create capabilities test and log if these were executed successfully.\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1665178359,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjUlfzE"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create command to execute list of host. -\u003e The command `net.splitcells.network.deploy.build` was created for that.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [x] Create repos. Upload via ssh mounts.\n   * [x] Install OSSI.\n   * [x] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [x] Use `net.splitcells.network.deploy.build.at`.\n* [x] Clean up private network build commands.\n* [x] Execute tests without password query. -\u003e This is not relevant for now.\n* [x] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);` -\u003e  A hack is currently used.\n* [ ] Execute functionality/integration tests.\n   * [x] test-via-mutations-via-pitest\n   * [x] profile-performance-of-maven -\u003e This Maven profile is not needed anymore.\n   * [x] report\n   * [ ] Create `bin/test.everything.via.network.worker`\n      * [ ] Create general network worker starter.\n      * [ ] Create general network worker finisher.\n      * [ ] Create capabilities test and log if these were executed successfully.\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1665178360,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjUlfzs"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create command to execute list of host. -\u003e The command `net.splitcells.network.deploy.build` was created for that.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [x] Document, what needs to be done on network server.\n   * [x] Create repos. Upload via ssh mounts.\n   * [x] Install OSSI.\n   * [x] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [x] Use `net.splitcells.network.deploy.build.at`.\n* [x] Clean up private network build commands.\n* [x] Execute tests without password query. -\u003e This is not relevant for now.\n* [x] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);` -\u003e  A hack is currently used.\n* [ ] Execute functionality/integration tests.\n   * [x] test-via-mutations-via-pitest\n   * [x] profile-performance-of-maven -\u003e This Maven profile is not needed anymore.\n   * [x] report\n   * [ ] Create `bin/test.everything.via.network.worker`\n      * [ ] Create general network worker starter.\n      * [ ] Create general network worker finisher.\n      * [ ] Create capabilities test and log if these were executed successfully.\n* [ ] Define and document OSI command to execute all network tests: `net.splitcells.network.deploy.build.at`","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1665178628,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjUliKY"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create command to execute list of host. -\u003e The command `net.splitcells.network.deploy.build` was created for that.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [ ] Document, what needs to be done on network server.\n   * [x] Create repos. Upload via ssh mounts.\n   * [x] Install OSSI.\n   * [x] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [x] Use `net.splitcells.network.deploy.build.at`.\n* [x] Clean up private network build commands.\n* [x] Execute tests without password query. -\u003e This is not relevant for now.\n* [x] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);` -\u003e  A hack is currently used.\n* [ ] Execute functionality/integration tests.\n   * [x] test-via-mutations-via-pitest\n   * [x] profile-performance-of-maven -\u003e This Maven profile is not needed anymore.\n   * [x] report\n   * [ ] Create `bin/test.everything.via.network.worker`\n      * [ ] Create general network worker starter.\n      * [ ] Create general network worker finisher.\n      * [ ] Create capabilities test and log if these were executed successfully.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1665221232,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjUoXoA"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create command to execute list of host. -\u003e The command `net.splitcells.network.deploy.build` was created for that.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [x] Document, what needs to be done on network server.\n   * [x] Create repos. Upload via ssh mounts.\n   * [x] Install OSSI.\n   * [x] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [x] Use `net.splitcells.network.deploy.build.at`.\n* [x] Clean up private network build commands.\n* [x] Execute tests without password query. -\u003e This is not relevant for now.\n* [x] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);` -\u003e  A hack is currently used.\n* [ ] Execute functionality/integration tests.\n   * [x] test-via-mutations-via-pitest\n   * [x] profile-performance-of-maven -\u003e This Maven profile is not needed anymore.\n   * [x] report\n   * [ ] Create `bin/test.everything.via.network.worker`\n      * [ ] Create general network worker starter.\n      * [ ] Create general network worker finisher.\n      * [ ] Create capabilities test and log if these were executed successfully.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1665940461,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjWJKrI"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create command to execute list of host. -\u003e The command `net.splitcells.network.deploy.build` was created for that.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [x] Document, what needs to be done on network server.\n   * [x] Create repos. Upload via ssh mounts.\n   * [x] Install OSSI.\n   * [x] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [x] Use `net.splitcells.network.deploy.build.at`.\n* [x] Clean up private network build commands.\n* [x] Execute tests without password query. -\u003e This is not relevant for now.\n* [x] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);` -\u003e  A hack is currently used.\n* [ ] Execute functionality/integration tests.\n   * [x] test-via-mutations-via-pitest\n   * [x] profile-performance-of-maven -\u003e This Maven profile is not needed anymore.\n   * [x] report\n   * [ ] Create `bin/test.everything.via.network.worker`\n      * [x] Create ExtenstiveTester for network worker.\n      * [ ] Execute all tests. Currently, only Dem tests are executed, because of a dependency issue. By executing the network worker via the network system, this problem should be fixed.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1666373506,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjXfPjc"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create command to execute list of host. -\u003e The command `net.splitcells.network.deploy.build` was created for that.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [x] Document, what needs to be done on network server.\n   * [x] Create repos. Upload via ssh mounts.\n   * [x] Install OSSI.\n   * [x] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [x] Use `net.splitcells.network.deploy.build.at`.\n* [x] Clean up private network build commands.\n* [x] Execute tests without password query. -\u003e This is not relevant for now.\n* [x] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);` -\u003e  A hack is currently used.\n* [ ] Execute functionality/integration tests.\n   * [x] test-via-mutations-via-pitest\n   * [x] profile-performance-of-maven -\u003e This Maven profile is not needed anymore.\n   * [x] report\n   * [ ] Create `bin/test.everything.via.network.worker`\n      * [x] Create ExtenstiveTester for network worker.\n      * [x] Execute all tests. Currently, only Dem tests are executed, because of a dependency issue. By executing the network worker via the network system, this problem should be fixed.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1666373508,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjXfPl0"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create command to execute list of host. -\u003e The command `net.splitcells.network.deploy.build` was created for that.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [x] Document, what needs to be done on network server.\n   * [x] Create repos. Upload via ssh mounts.\n   * [x] Install OSSI.\n   * [x] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [x] Use `net.splitcells.network.deploy.build.at`.\n* [x] Clean up private network build commands.\n* [x] Execute tests without password query. -\u003e This is not relevant for now.\n* [x] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);` -\u003e  A hack is currently used.\n* [ ] Execute functionality/integration tests.\n   * [x] test-via-mutations-via-pitest\n   * [x] profile-performance-of-maven -\u003e This Maven profile is not needed anymore.\n   * [x] report\n   * [x] Create `bin/test.everything.via.network.worker`\n      * [x] Create ExtenstiveTester for network worker.\n      * [x] Execute all tests. Currently, only Dem tests are executed, because of a dependency issue. By executing the network worker via the network system, this problem should be fixed.","files":null},{"type":6,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1666373510,"metadata":{"github-id":"UCE_lAHOFCNQW85Cba1rzjXfPm0"},"target":"ff9d4b91dce7fe0f18dcaab83d82b0127b1c6527959d537682514035d4e1019d","message":"* [x] Log test execution runtimes.\n   * [x] Document new Logger.\n   * [x] Document new Builder.\n* [x] Test and publish results via `./bin/deploy.build`:\n   * [x] RISC-V\n   * [x] ARM\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create status document, that checks if all tests were recently executed via the logged test runtimes and all executors.\n* [x] Test if tests are executed and create some kind of warning, if this is not the case.\n   * [x] Create execution log for network logger for each executor, as is done for logging test execution times.\n* [x] Show tasks that were executed often enough. Otherwise, there is no list of all tasks, which can be hurtful in case some tasks are missing entirely in the network log.\n* [x] Implement and use `net.splitcells.network.deploy.build.at` in private repo.\n   * [x] ARM (`repo.commit.all` is not found by `network.worker`, because it is executed with sh and without PATH extension for OSI)\n   * [x] RISC-V -\u003e log errors via `test.via.network.worker` and debug them\n   * [x] Laptop\n   * [x] Desktop\n* [x] Create command to execute list of host. -\u003e The command `net.splitcells.network.deploy.build` was created for that.\n   * [x] Do not deploy build if target host not available and create simple warning instead. -\u003e This is done manually via `system.network.peer.reachable`.\n   * [x] Do not deploy build if target host is itself. -\u003e This is not an issue.\n* [x] Consider https://www.pygit2.org/ as an alternative permissive implementation. -\u003e The underlying git implementation is currently not important.\n* [x] Document, what needs to be done on network server.\n   * [x] Create repos. Upload via ssh mounts.\n   * [x] Install OSSI.\n   * [x] `git config --global user.email \u0026\u0026 git config --global user.name`\n   * [x] Use `net.splitcells.network.deploy.build.at`.\n* [x] Clean up private network build commands.\n* [x] Execute tests without password query. -\u003e This is not relevant for now.\n* [x] Ensure, that repo commit is working on node: `SystemUtils.executeShellScript(\"sh -c \\\". ~/bin/net.splitcells.os.state.interface.commands.managed/command.managed.export.bin; command.managed.execute.command repo.commit.all\\\"\", logProject);` -\u003e  A hack is currently used.\n* [x] Execute functionality/integration tests.\n   * [x] test-via-mutations-via-pitest\n   * [x] profile-performance-of-maven -\u003e This Maven profile is not needed anymore.\n   * [x] report\n   * [x] Create `bin/test.everything.via.network.worker`\n      * [x] Create ExtenstiveTester for network worker.\n      * [x] Execute all tests. Currently, only Dem tests are executed, because of a dependency issue. By executing the network worker via the network system, this problem should be fixed.","files":null},{"type":4,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1666373782,"metadata":{"github-id":"CE_lADOFCNQW85Cba1rzwAAAAHHiC9k"},"status":2}]}