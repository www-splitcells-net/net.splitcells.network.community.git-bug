{"version":1,"ops":[{"type":1,"author":{"id":"96d5451eb56f6bba7bab9f977793056e8c78923a"},"timestamp":1665172035,"metadata":{"github-id":"I_kwDOFCNQW85TisY4","github-url":"https://github.com/www-splitcells-net/net.splitcells.network/issues/205","origin":"github"},"title":"Replace exceptions in core code.","message":"* [ ] Blog about it. See https://splitcells-net.srht.site/blog/2021-10-04-there-is-bad-there-is-horrible-and-then-there-is-error-handling/ for reference.\n* [ ] Exceptions are a very useful concept and helpful, but should only be used indirectly or in extension/aspect code.\n   No catching in core/API code.\n* [ ] Error repair should be handled via explicitly returned error values, but how to handle returned unprocessed errors?\n   Probably all errors should be stored in environment and after execution it should be checked, if all errors were processed.\n   When processing an error, the error is to be removed from the environment.\n   It should be possible to disable this environment safeguard for increased runtime performance.\n   A static boolean flag could be used in this case instead.\n* [ ] See Java Thread UncaughtExceptionHandler for inspiration.","files":null}]}